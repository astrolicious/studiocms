# Enables and configures Node.js.
node:
  
  # Defines the explicit Node.js version specification to use. If this field is not defined, the global node binary will be used.
  # Version can also be defined with .prototools or with the MOON_NODE_VERSION environment variable.
  version: '20.14.0'
  
  # Defines which package manager to utilize. Supports npm (default), pnpm, yarn, or bun.
  packageManager: 'pnpm'
  
  # Optional fields for defining package manager specific configuration. The chosen setting is dependent on the value of node.packageManager. If these settings are not defined, the latest version of the active package manager will be used (when applicable).
  # pnpm:
  
  # The version setting defines the explicit package manager version specification to use. If this field is not defined, the global npm, pnpm, yarn, and bun binaries will be used.
  # Version can also be defined with .prototools or with the MOON_NPM_VERSION, MOON_PNPM_VERSION, MOON_YARN_VERSION, or MOON_BUN_VERSION environment variables.
  #   version: ''

  # Customize the arguments that will be passed to the package manager's install command, when the InstallDeps action is triggered in the pipeline. These arguments are used both locally and in CI.
  # installArgs: ['--immutable']

  # Injects the currently configured Node.js version as an engines constraint to the root package.json field.
  addEnginesConstraint: true

  # Additional command line arguments to pass to the node binary when it's being executed by running a target. This will apply arguments to all Node.js based targets, and cannot be changed on a per target basis.
  # binExecArgs:

  # Will dedupe dependencies after they have been installed, added, removing, or changed in any way, in an effort to keep the workspace tree as clean and lean as possible.
  dedupeOnLockfileChange: true


  # When syncing project dependencies, customize the format that will be used for the dependency version range. The following formats are supported (but use the one most applicable to your chosen package manager):

  # - file (npm default) - Uses file:../relative/path and copies package contents.
  # - link - Uses link:../relative/path and symlinks package contents.
  # - star - Uses an explicit *.
  # - version - Uses the explicit version from the dependent project's package.json, e.g., "1.2.3".
  # - version-caret - Uses the version from the dependent project's package.json as a caret range, e.g., "^1.2.3".
  # - version-tilde - Uses the version from the dependent project's package.json as a tilde range, e.g., "~1.2.3".
  # - workspace (bun/pnpm/yarn default) - Uses workspace:*, which resolves to "1.2.3". Requires package workspaces.
  # - workspace-caret - Uses workspace:^, which resolves to "^1.2.3". Requires package workspaces.
  # - workspace-tilde - Uses workspace:~, which resolves to "~1.2.3". Requires package workspaces.
  # 
  # This setting does not apply to peer dependencies, as they will always use a format of ^<major>.0.0. Furthermore, if a package manager does not support a chosen format, it will fallback to another format!
  dependencyVersionFormat: workspace


  # Will infer and automatically create tasks from package.json scripts.
  #
  # This requires the project's language to be "javascript" or "typescript", a package.json to exist in the project, and will take the following into account:
  #
  # Script names will be converted to kebab-case, and will become the task ID.
  # Pre, post, and life cycle hooks are ignored.
  # Tasks defined in .moon/tasks.yml or moon.yml take precedence over scripts of the same name.
  # To verify inferred tasks, run moon project <id> (pass --json to view raw config and options). Tasks that are inferred will run through the configured package manager.
  inferTasksFromScripts: true

  # Supports the "single version policy" or "one version rule" patterns by only allowing dependencies in the root package.json, and only installing dependencies in the workspace root, and not within individual projects. It also bypasses all workspaces checks to determine package locations.
  # 
  # This setting does not verify that other package.jsons do not have dependencies, it merely runs "install dependency" commands in the root. It's up to you to ensure that other package.jsons do not have dependencies.
  rootPackageOnly: false

  # Will sync a project's dependencies as normal dependencies within the project's package.json. If a dependent project does not have a package.json, or if a dependency of the same name has an explicit version already defined, the sync will be skipped.
  syncProjectWorkspaceDependencies: true

  # Will sync the currently configured Node.js version to a 3rd-party version manager's config/rc file. Supports "nodenv" (syncs to .node-version), "nvm" (syncs to .nvmrc), or none (default).
  # 
  # This is a special setting that ensure other Node.js processes outside of our toolchain are utilizing the same version, which is a very common practice when managing dependencies.
  syncVersionManagerConfig: nodenv

# Dictates how moon interacts with and utilizes TypeScript within the workspace.
typescript: 

  # When syncing project references and a depended on project does not have a tsconfig.json, automatically create one.
  createMissingConfig: true

  # When enabled and syncing project references, will inject each project reference as an entry in the include field of the respective project's tsconfig.json. These includes are sometimes required by editors for auto-completion, intellisense, and automatic imports.
  includeProjectReferenceSources: true

  # When enabled, will automatically inject shared types (types/**/*) into the include field of each project's tsconfig.json. The shared types folder must be named types and must exist relative to the root setting.
  includeSharedTypes: true

  # Defines the file name of the tsconfig.json found in the project root. We utilize this setting when syncing project references between projects. Defaults to tsconfig.json.
  projectConfigFileName: 'tsconfig.json'

  # Defines the TypeScript root (relative from moon's workspace root), where project reference composition, common compiler options, and shared types will be located.
  root: '.'

  # Defines the file name of the tsconfig.json found in the root of all projects. We utilize this setting when syncing projects as references.
  rootConfigFileName: 'tsconfig.json'

  # Defines the file name of the config file found in the root that houses shared compiler options.
  rootOptionsConfigFileName: '.config/tsconfig.json'

  # Updates the outDir compiler option in each project's tsconfig.json to route to moon's cache folder. This is useful when using project references and wanting to keep all the compiled .d.ts files out of the project folder.
  routeOutDirToCache: true

  # Will sync a project's dependencies (when applicable) as project references within that project's tsconfig.json, and the root tsconfig.json.
  # 
  # This setting assumes you're using the file organization as defined in our official TypeScript project references in-depth guide.
  syncProjectReferences: true

  # Will sync a project's tsconfig.json project references to the paths compiler option, using the referenced project's package.json name.
  syncProjectReferencesToPaths: true