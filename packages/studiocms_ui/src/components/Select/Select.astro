---
import './Select.css';

import Icon from '../../utils/Icon.astro';
import { generateID } from '../../utils/generateID';

type Option = {
	label: string;
	value: string;
	disabled?: boolean;
};

type Props = {
	label?: string;
	defaultValue?: string;
	class?: string;
	name?: string;
	isRequired?: boolean;
	options: Option[];
	disabled?: boolean;
	fullWidth?: boolean;
};

const {
	label,
	defaultValue,
	class: className,
	name = generateID('dropdown'),
	isRequired,
	options = [],
	disabled,
	fullWidth,
} = Astro.props;
---

<div id={`${name}-container`} class="select-label" class:list={[disabled && "disabled", className, fullWidth && "full"]}>
  <label class="label" for={`${name}-select-btn`}>
    {label} <span class="req-star">{isRequired && "*"}</span>
  </label>
  <button
    class="select-button"
    role="combobox"
    id={`${name}-select-btn`}
    type="button"
  >
    <span id={`${name}-value-span`}>{defaultValue ? options.find(x => x.value === defaultValue)?.label : "Select"}</span>
    <Icon name='chevron-up-down' width={20} height={20} />
  </button>
  <ul class="select-dropdown" role="listbox" id={`${name}-dropdown`}>
    {options.map((x, i) => (
      <li 
        class="select-option"
        role="option"
        value={x.value}
        class:list={[defaultValue === x.value && `selected`, x.disabled && "disabled"]}
        id={defaultValue === x.value ? `${name}-selected` : ''}
        data-option-index={i}
      >
        {x.label}
      </li>
    ))}
  </ul>
  <select class="hidden-select" id={name} name={name} required={isRequired}>
    <option 
      value={''}
    >
      Select
    </option>
    {options.map((x) => (
      <option 
        value={x.value}
        selected={defaultValue === x.value}
        disabled={x.disabled}
      >
        {x.label}
      </option>
    ))}
  </select>
</div>
<script is:inline define:vars={{ id: name, options }}>
  const container = document.getElementById(`${id}-container`);
  const hiddenSelect = document.getElementById(id);
  const button = document.getElementById(`${id}-select-btn`);
  const valueSpan = document.getElementById(`${id}-value-span`);
  const dropdown = document.getElementById(`${id}-dropdown`);
  const optionElements = container.querySelectorAll('li');

  let active = false;

  button.addEventListener('click', () => {
    const { bottom, left, right, width, x, y, height } = button.getBoundingClientRect();

    const optionHeight = 36;
    const totalBorderSize = 2;
    const margin = 4;
    
    const dropdownHeight = ((options.length * optionHeight) + totalBorderSize + margin);

    const CustomRect = {
      top: bottom + margin,
      left,
      right,
      bottom: bottom + margin + dropdownHeight,
      width,
      height: dropdownHeight,
      x,
      y: y + height + margin,
    };

    if (active) {
      dropdown.classList.remove('active', 'above');
      active = false;
      return;
    }

    active = true;

    if (
      CustomRect.top >= 0 &&
      CustomRect.left >= 0 &&
      CustomRect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && 
      CustomRect.right <= (window.innerWidth || document.documentElement.clientWidth)
    ) {
      dropdown.classList.add('active');
    } else {
      dropdown.classList.add('active', 'above');
    }
  });

  optionElements.forEach((option) => {
    option.addEventListener('click', (e) => {
      e.stopImmediatePropagation();
      if (option.id === `${id}-selected` || !id) return;

      const currentlySelected = document.getElementById(`${id}-selected`);
      
      if (currentlySelected) {
        currentlySelected.classList.remove('selected');
        currentlySelected.id = '';
      }

      option.id = `${id}-selected`;
      option.classList.add('selected');

      const opt = options[parseInt(option.dataset.optionIndex)];
      hiddenSelect.value = opt.value;
      
      valueSpan.textContent = opt.label;
      dropdown.classList.remove('active', 'above');

      active = false;
    });
  });

  window.addEventListener('scroll', () => {
    dropdown.classList.remove('active', 'above');
    active = false;
  });

  hideOnClickOutside(container);

  function hideOnClickOutside(element) {
    const outsideClickListener = (event) => {
      if (!element.contains(event.target) && isVisible(element) && active === true) { // or use: event.target.closest(selector) === null
        dropdown.classList.remove('active', 'above');
        active = false;
      }
    }

    const removeClickListener = () => {
      document.removeEventListener('click', outsideClickListener);
    }

    document.addEventListener('click', outsideClickListener);
  }

  // source (2018-03-11): https://github.com/jquery/jquery/blob/master/src/css/hiddenVisibleSelectors.js 
  const isVisible = elem => !!elem && !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
</script>