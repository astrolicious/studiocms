---
import type { HTMLTag, Polymorphic } from 'astro/types';

type Props<As extends HTMLTag> = Polymorphic<{ as: As }> & {
	size?: 'sm' | 'md' | 'lg';
	fullWidth?: boolean;
	color?: 'default' | 'primary' | 'success' | 'danger';
	variant?: 'solid' | 'outlined';
	class?: string;
  disabled?: boolean;
};

const {
	size = 'md',
	fullWidth = false,
	color = 'default',
	variant = 'default',
	as: As = 'button',
	class: className,
  disabled = false,
	...props
} = Astro.props;
---

<As
  class="button"
  class:list={[
    fullWidth && 'full',
    disabled && 'disabled',
    className, 
    size,
    color,
    variant,
  ]}
  disabled={disabled}
  {...props}
>
  <slot name="start-content" />
  <slot />
  <slot name="end-content" />
</As>
<style>
  .button {
    display: flex;
    flex-direction: row;
    align-items: center;
    text-align: center;

    position: relative;

    /* TODO: Move gaps & radii to spacings.css */
    gap: .5rem;

    outline: none;
    border: none;

    font-weight: 400;

    border-radius: .5rem;

    transition: background-color .1s ease;

    cursor: pointer;

    /* Default colorway */

    background-color: var(--default-base);
    border-color: var(--border);
    color: var(--text-muted);

    min-width: fit-content;
  }

  .button.disabled {
    pointer-events: none;
    opacity: .5;
  }

  .button.outlined {
    border-width: 1px;
    border-style: solid;
  }

  .button:hover {
    background-color: var(--default-hover);
  }

  .button:active {
    background-color: var(--default-active);
  }

  .button.sm {
    height: 32px;
    padding: .5rem .75rem;

    font-size: .825em;
  }

  .button.md {
    height: 40px;
    padding: .5rem .75rem;

    font-size: .825em;
  }

  .button.lg {
    height: 48px;
    padding: .75rem 1rem;

    font-size: 1em;
  }

  .button.primary {
    background-color: var(--primary-base);
    border-color: var(--primary-base);
    color: var(--text-inverted);
  }

  .button.primary.outlined {
    background-color: var(--default-base);
    color: var(--text-normal);
  }

  .button.primary:hover {
    background-color: var(--primary-hover);
  }

  .button.primary.outlined:hover {
    background-color: var(--default-hover);
  }

  .button.primary:active {
    background-color: var(--primary-active);
  }

  .button.primary.outlined:active {
    background-color: var(--default-active);
  }

  .button.success {
    background-color: var(--success-base);
    border-color: var(--success-base);
    color: var(--text-dark);
  }

  .button.success.outlined {
    background-color: var(--default-base);
    color: var(--text-normal);
  }

  .button.success:hover {
    background-color: var(--success-hover);
  }

  .button.success.outlined:hover {
    background-color: var(--default-hover);
  }

  .button.success:active {
    background-color: var(--success-active);
  }

  .button.success.outlined:active {
    background-color: var(--default-active);
  }

  .button.danger {
    background-color: var(--danger-base);
    border-color: var(--danger-base);
    color: var(--text-light);
  }

  .button.danger.outlined {
    background-color: var(--default-base);
    color: var(--text-normal);
  }

  .button.danger:hover {
    background-color: var(--danger-hover);
  }

  .button.danger.outlined:hover {
    background-color: var(--default-hover);
  }

  .button.danger:active {
    background-color: var(--danger-active);
  }

  .button.danger.outlined:active {
    background-color: var(--default-active);
  }

  .button.full {
    width: 100%;
  }
</style>