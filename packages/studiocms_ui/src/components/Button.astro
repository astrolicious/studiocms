---
import type { HTMLTag, Polymorphic } from 'astro/types';

type Props<As extends HTMLTag = 'button'> = Omit<Polymorphic<{ as: As }>, 'as'> & {
	as?: As;
	size?: 'sm' | 'md' | 'lg';
	fullWidth?: boolean;
	color?: 'default' | 'primary' | 'success' | 'warning' | 'danger';
	variant?: 'solid' | 'outlined' | 'flat';
	class?: string;
	disabled?: boolean;
};

const {
	size = 'md',
	fullWidth = false,
	color = 'default',
	variant = 'default',
	as: As = 'button',
	class: className,
	disabled = false,
	...props
} = Astro.props;
---

<As
  class="button"
  class:list={[
    fullWidth && 'full',
    disabled && 'disabled',
    className, 
    size,
    color,
    variant,
  ]}
  disabled={disabled}
  {...props}
>
  <slot name="start-content" />
  <slot />
  <slot name="end-content" />
</As>
<style>
  /* Default Styles */
  .button {
    display: flex;
    flex-direction: row;
    align-items: center;
    text-align: center;

    position: relative;

    /* TODO: Move gaps & radii to spacings.css */
    gap: .5rem;

    outline: none;
    border: none;

    font-weight: 400;

    border-radius: .5rem;

    transition: all .15s ease;

    cursor: pointer;

    /* Default colorway */

    background-color: hsl(var(--default-base));
    border-color: hsl(var(--border));
    color: hsl(var(--text-muted));

    min-width: fit-content;

    will-change: transform;
  }

  .button.disabled {
    pointer-events: none;
    opacity: .5;
  }

  .button.outlined {
    border-width: 1px;
    border-style: solid;
  }

  .button:hover {
    background-color: hsl(var(--default-hover));
  }

  .button:active {
    background-color: hsl(var(--default-active));
    transform: scale(.95);
  }

  .button.flat {
    background: hsla(var(--default-flat));
  }

  .button.flat:hover {
    background: hsla(var(--default-flat-hover));
  }

  .button.flat:active {
    background: hsla(var(--default-flat-active));
  }

  /* Sizes */
  .button.sm {
    height: 32px;
    padding: .5rem .75rem;

    font-size: .825em;
  }

  .button.md {
    height: 40px;
    padding: .5rem .75rem;

    font-size: .875em;
  }

  .button.lg {
    height: 48px;
    padding: .75rem 1rem;

    font-size: 1em;
  }

  /* Primary Colorway */
  .button.primary {
    background-color: hsl(var(--primary-base));
    border-color: hsl(var(--primary-base));
    color: hsl(var(--text-inverted));
  }

  .button.primary:hover {
    background-color: hsl(var(--primary-hover));
  }

  .button.primary:active {
    background-color: hsl(var(--primary-active));
  }

  .button.primary.outlined {
    background-color: hsl(var(--default-base));
    color: hsl(var(--text-normal));
  }

  .button.primary.outlined:hover {
    background-color: hsl(var(--default-hover));
  }

  .button.primary.outlined:active {
    background-color: hsl(var(--default-active));
  }

  .button.primary.flat {
    background-color: hsla(var(--primary-flat));
    color: hsl(var(--primary-base));
  }

  .button.primary.flat:hover {
    background-color: hsla(var(--primary-flat-hover));
  }

  .button.primary.flat:active {
    background-color: hsla(var(--primary-flat-active));
  }

  /* Success Colorway */
  .button.success {
    background-color: hsl(var(--success-base));
    border-color: hsl(var(--success-base));
    color: hsl(var(--text-dark));
  }

  .button.success:hover {
    background-color: hsl(var(--success-hover));
  }

  .button.success:active {
    background-color: hsl(var(--success-active));
  }

  .button.success.outlined {
    background-color: hsl(var(--default-base));
    color: hsl(var(--text-normal));
  }

  .button.success.outlined:hover {
    background-color: hsl(var(--default-hover));
  }

  .button.success.outlined:active {
    background-color: hsl(var(--default-active));
  }

  .button.success.flat {
    background-color: hsla(var(--success-flat));
    color: hsl(var(--success-base));
  }

  .button.success.flat:hover {
    background-color: hsla(var(--success-flat-hover));
  }

  .button.success.flat:active {
    background-color: hsla(var(--success-flat-active));
  }

  /* Warning Colorway */
  .button.warning {
    background-color: hsl(var(--warning-base));
    border-color: hsl(var(--warning-base));
    color: hsl(var(--text-dark));
  }

  .button.warning:hover {
    background-color: hsl(var(--warning-hover));
  }

  .button.warning:active {
    background-color: hsl(var(--warning-active));
  }

  .button.warning.outlined {
    background-color: hsl(var(--default-base));
    color: hsl(var(--text-normal));
  }

  .button.warning.outlined:hover {
    background-color: hsl(var(--default-hover));
  }

  .button.warning.outlined:active {
    background-color: hsl(var(--default-active));
  }

  .button.warning.flat {
    background-color: hsla(var(--warning-flat));
    color: hsl(var(--warning-base));
  }

  .button.warning.flat:hover {
    background-color: hsla(var(--warning-flat-hover));
  }

  .button.warning.flat:active {
    background-color: hsla(var(--warning-flat-active));
  }

  /* Danger Colorway */
  .button.danger {
    background-color: hsl(var(--danger-base));
    border-color: hsl(var(--danger-base));
    color: hsl(var(--text-light));
  }

  .button.danger:hover {
    background-color: hsl(var(--danger-hover));
  }

  .button.danger:active {
    background-color: hsl(var(--danger-active));
  }

  .button.danger.outlined {
    background-color: hsl(var(--default-base));
    color: hsl(var(--text-normal));
  }

  .button.danger.outlined:hover {
    background-color: hsl(var(--default-hover));
  }

  .button.danger.outlined:active {
    background-color: hsl(var(--default-active));
  }

  .button.danger.flat {
    background-color: hsla(var(--danger-flat));
    color: hsl(var(--danger-base));
  }

  .button.danger.flat:hover {
    background-color: hsla(var(--danger-flat-hover));
  }

  .button.danger.flat:active {
    background-color: hsla(var(--danger-flat-active));
  }

  .button.full {
    width: 100%;
  }
</style>