---
import { Avatar } from 'studiocms:components';
import { StudioCMSRoutes } from 'studiocms:helpers/routemap';
import { externalNav } from 'virtual:studiocms/pluginSystem';
import './navigation.css';
import { pathWithBase } from 'studiocms:helpers';
import { getPageList, getSiteConfig } from 'studiocms:helpers/contentHelper';

type Props = {
	topLevelLinkCount?: number;
	hideAvatar?: boolean;
};

const { hideAvatar, topLevelLinkCount = 3 } = Astro.props;

const config = await getSiteConfig();
const pageList = await getPageList();

const { title } = config;
const {
	mainLinks: { baseSiteURL },
} = StudioCMSRoutes;

type LinkProps = {
	text: string;
	href: string;
};

const links: LinkProps[] = [];

const navPagesList = pageList
	.filter((page) => page.showOnNav === true && page.package === '@astrolicious/studiocms')
	.sort((a, b) => Date.parse(b.publishedAt.toString()) - Date.parse(a.publishedAt.toString()));

const indexPage = navPagesList.find((page) => page.slug === 'index');

if (indexPage) {
	links.push({
		text: indexPage.title || 'Home',
		href: import.meta.env.BASE_URL,
	});
}

const restOfPages = navPagesList.filter((page) => page.slug !== 'index');

for (const page of restOfPages) {
	links.push({
		text: page.title,
		href: pathWithBase(page.slug),
	});
}

const externalLinks = Array.from(externalNav.values());

for (const link of externalLinks) {
	links.push({
		text: link.text,
		href: pathWithBase(link.slug),
	});
}
---

<!-- If no dropdown items -->
{ ( links.length < topLevelLinkCount || links.length === topLevelLinkCount ) && (
    <div class="navigation">
        <div class="title"><a href={baseSiteURL}>{title}</a></div>
        <div class="mininav">
            <button>Menu</button>
            <div class="mininav-content">
            { 
                links.map(({ text, href }) => (
                    <a href={href}>{text}</a>
                )) 
            }
            </div>
        </div>
        { 
            links.map(({ text, href }) => (
                <a class="links" href={href}>{text}</a>
            )) 
        }

        { !hideAvatar && <div class="avatar"><Avatar /></div> }
    </div> 
) }

<!-- If dropdown items -->
{ links.length > topLevelLinkCount && (
    <div class="navigation">
        <div class="title"><a href={baseSiteURL}>{title}</a></div>

        <div class="mininav">
            <button>Menu</button>
            <div class="mininav-content">
            { 
                links.map(({ text, href }) => (
                    <a href={href}>{text}</a>
                )) 
            }
            </div>
        </div>
        { 
            links.slice(0, topLevelLinkCount).map(({ text, href }) => (
                    <a class="links" href={href}>{text}</a>
            ))
        }
            <div class="dropdown">
                <button>More â–¼</button>
                <div class="dropdown-content">
                    { links.slice(topLevelLinkCount).map(({ text, href }) => (
                        <a href={href}>{text}</a>
                    )) }
                </div>
            </div>
        { !hideAvatar && <div class="avatar"><Avatar /></div> }
    </div>
) }