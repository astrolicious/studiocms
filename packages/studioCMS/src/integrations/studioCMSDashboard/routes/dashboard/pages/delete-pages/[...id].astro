---
import { Layout } from 'studiocms-dashboard:components';
import { authHelper, type Locals } from 'studiocms:helpers';
import { StudioCMSRoutes, getDeleteRoute } from 'studiocms-dashboard:routeMap';
import { Alert, Button, Divider, Icon, Input, VisuallyHidden } from 'astrolace:components';
import { getSiteConfig, getPageById } from 'studiocms-dashboard:contentHelper';
import CrumbStack from '../../components/CrumbStack.astro';
import { makePageTitle } from '../../../../utils/makePageTitle';
import { logger } from '@it-astro:logger:StudioCMS';
import exclamationOctagon from "../../../assets/exclamation-octagon.svg";
import check2Circle from "../../../assets/check2-circle.svg";

const {
	mainLinks: { dashboardIndex, pageEdit },
    endpointLinks: { pages: { deletePages: deletePagesEndpoint } }
} = StudioCMSRoutes;

const { id } = Astro.params;

if (!id) {
	return Astro.redirect(dashboardIndex);
}
const contextConfig = await getSiteConfig();
const page = await getPageById(id);

if (!page) {
	return Astro.redirect(dashboardIndex);
}

const deleteURL = await getDeleteRoute(id);
const { permissionLevel } = await authHelper(Astro.locals as Locals);

// Check Permission Level
if (permissionLevel !== 'admin' && permissionLevel !== 'editor') {
	logger.info('User is not an admin or editor. Redirecting to profile page.');
	return Astro.redirect(StudioCMSRoutes.mainLinks.userProfile);
}
---
<Layout 
    sideBarActiveItemID="edit-pages" 
    title={makePageTitle("Delete Page", contextConfig)}
    description={contextConfig.description} >

    <CrumbStack 
        isDashboard 
        items={[
            { href: dashboardIndex, text: 'Dashboard' },
            { href: pageEdit, text: 'Existing Pages' },
            { href: deleteURL, text: `Delete Page: ${page.slug}` }
        ]} />

    <div class="container">

        <h1 class="text-5xl font-bold py-8">Delete Page: {page.title}</h1>

        <div class="py-2">
            <span class="text-lg">
                Slug: {page.slug}
            </span>
        </div>

        <div class="py-2 flex flex-col">
    
            <form method="post" id="delete-form" action={deletePagesEndpoint} enctype="multipart/form-data" >
                    
                <Input 
                    type="text" 
                    id="slug" 
                    name="slug" 
                    label='Type the slug to confirm'
                    placeholder="Your Page/Post Slug (THIS WILL DELETE THE PAGE/POST!)"
                    required />

                <input type="hidden" name="to-delete" id="to-delete" value={page.slug} />
                <input type="hidden" name="package" id="package" value={page.package} />
                <input type="hidden" name="page-id" id="page-id" value={page.id} />

                <Divider />
    
                <Button variant="danger" type="submit" outline>DELETE</Button>
    
            </form>
    

        <Alert id="form-error" variant="danger" duration={4000} closable>
            <Icon slot="icon" src={exclamationOctagon.src} />
            <strong>Something went wrong!</strong>
            <Divider />
            <div id="form-error-message"></div>
        </Alert>
        <Alert id="form-success" variant="success" duration={4000} closable>
            <Icon slot="icon" src={check2Circle.src} />
            <strong>Success!</strong>
            <Divider />
            <div id="form-success-message"></div>
        </Alert>

        <VisuallyHidden>
            <div id="edit-page-url">{pageEdit}</div>
        </VisuallyHidden>

        </div>
    </div>
</Layout>

<script is:inline>
    const formElement = document.getElementById('delete-form');
    const formError = document.getElementById('form-error');
    const formErrorMessage = document.getElementById('form-error-message');
    const formSuccess = document.getElementById('form-success');
    const formSuccessMessage = document.getElementById('form-success-message');
    const editPageURL = document.getElementById('edit-page-url');

    formElement.addEventListener('submit', async (e) => {
        e.preventDefault();
    
        const formElement = e.target;
        const response = await fetch(formElement.action, {
            method: formElement.method,
            body: new FormData(formElement)
        });
    
        if (response.ok) {
            formSuccessMessage.innerText = (await response.json()).message;
            formSuccess.toast();
            setTimeout(() => {
                window.location.replace(editPageURL.innerText);
            }, 4000)
        } else {
            formErrorMessage.innerText = (await response.json()).error;
            formError.toast();
        }
    
    })
</script>