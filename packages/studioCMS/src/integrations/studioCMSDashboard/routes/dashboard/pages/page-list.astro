---
import { Layout, FormattedDate } from 'studiocms-dashboard:components';
import { authHelper, pluginList, type Locals } from 'studiocms:helpers';
import { StudioCMSRoutes, getEditRoute, getDeleteRoute } from 'studiocms-dashboard:routeMap';
import { Button } from 'astrolace:components';
import { getSiteConfig, getPageList } from 'studiocms-dashboard:contentHelper';
import CrumbStack from '../components/CrumbStack.astro';
import { fixPackageLabel } from '../../../utils/pageListPackageLabel';
import { makePageTitle } from '../../../utils/makePageTitle';
import { logger } from '@it-astro:logger:StudioCMS';

const {
	mainLinks: { dashboardIndex, pageEdit },
} = StudioCMSRoutes;

const contextConfig = await getSiteConfig();
const pages = await getPageList();
const { permissionLevel } = await authHelper(Astro.locals as Locals);

// Check Permission Level
if (permissionLevel !== 'admin' && permissionLevel !== 'editor') {
	logger.info('User is not an admin or editor. Redirecting to profile page.');
	return Astro.redirect(StudioCMSRoutes.mainLinks.userProfile);
}
---

<Layout 
    sideBarActiveItemID="edit-pages" 
    title={makePageTitle("Existing Pages", contextConfig)}
    description={contextConfig.description} >

    <CrumbStack items={[
        { href: dashboardIndex, text: 'Dashboard', prefix: 'columns-gap' },
        { href: pageEdit, text: 'Existing Pages' }
    ]} />

    <div class="container">

        <h1 class="text-5xl font-bold py-8">Existing Pages</h1>

        <div class="py-2">
            <div class="relative">
                <table class="w-full text-left rtl:text-right">
                    <thead class="uppercase bg-base-300 text-inherit">
                        <tr>
                            <th scope="col" class="px-6 py-3">Page Title</th>
                            <th scope="col" class="px-6 py-3">Package Relation</th>
                            <th scope="col" class="px-6 py-3">Publish Date</th>
                            <th scope="col" class="px-6 py-3">Edit</th>
                            <th scope="col" class="px-6 py-3">Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        { 
                            pages.map(async (page) => {
                                return (
                                    <tr class="bg-base-200 text-inherit">
                                        <th scope="row" class="px-6 py-4 font-medium whitespace-nowrap">
                                            {page.title}
                                        </th>
                                        <td class="px-6 py-4">
                                            {fixPackageLabel(page.package, pluginList)}
                                        </td>
                                        <td class="px-6 py-4">
                                            <FormattedDate date={page.publishedAt}/>
                                        </td>
                                        <td class="px-6 py-4">
                                            <Button variant="success" href={await getEditRoute(page.id)} size="small" pill outline>
                                                Edit
                                            </Button>
                                        </td>
                                        <td class="px-6 py-4">
                                            { permissionLevel === 'admin' && (
                                                <Button variant="danger" href={await getDeleteRoute(page.id)} size="small" pill outline>
                                                    Delete
                                                </Button> )
                                            }
                                        </td>
                                    </tr>
                                )
                            })
                        }
                    </tbody>
                </table>
            </div>
        </div>

    </div>
</Layout>

