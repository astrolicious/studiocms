---
// @ts-expect-error - Some types can only be imported from the Astro runtime
import { SiteConfig, Pages, db, asc } from 'astro:db';
import { Layout } from 'studiocms-dashboard:components';
import Config from 'virtual:studiocms/config';
import { authHelper, urlGenFactory, type Locals } from 'studiocms:helpers';
import { FormattedDate } from 'studiocms:components';

if (Config.includedIntegrations.useInoxSitemap) {
    import('sitemap-ext:config').then((sitemap) => {
        sitemap.default(false)
    })
}

const { dashboardConfig: { developerConfig, dashboardRouteOverride } } = Config;

const ConfigArray = await db.select().from(SiteConfig);
const posts = await db.select().from(Pages).orderBy(asc(Pages.id));

const contextConfig = ConfigArray.pop();

const locals = Astro.locals as Locals;
const { permissionLevel } = await authHelper(locals);

// If the user is not logged in, redirect to the login page
if ( !developerConfig.testingAndDemoMode ) {
    if ( permissionLevel === "unknown" ) {
        console.log('User is not logged in. Redirecting to login page.');
        return Astro.redirect(await urlGenFactory(true, "login", dashboardRouteOverride));
    }
    if ( permissionLevel !== 'admin' && permissionLevel !== 'editor' ) {
        console.log('User is not an admin or editor. Redirecting to profile page.');
        return Astro.redirect(await urlGenFactory(true, "profile", dashboardRouteOverride));
    }
}

const pageTitle = `Existing Pages | ${contextConfig.title}`;
---

<Layout 
    sideBarActiveItemID="edit-pages" 
    title={pageTitle}
    description={contextConfig.description} >
    <div class="pb-4 mt-5">

        <div class="text-5xl font-bold">Existing Pages</div>

        <div class="py-2">
            <div class="relative max-w-[100vw] lg:max-w-[1800px] ">
                <table class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
                    <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                        <tr>
                            <th scope="col" class="px-6 py-3">Post Title</th>
                            <th scope="col" class="px-6 py-3">Publish Date</th>
                            <th scope="col" class="px-6 py-3">Edit</th>
                            <th scope="col" class="px-6 py-3">Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        { 
                            posts.map(async (post: typeof Pages.$inferSelect) => {
                                return (
                                    <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700">
                                        <th scope="row" class="px-6 py-4 font-medium text-gray-900 whitespace-nowrap dark:text-white">
                                            {post.title}
                                        </th>
                                        <td class="px-6 py-4">
                                            <FormattedDate date={post.publishedAt}/>
                                        </td>
                                        <td class="px-6 py-4 bg-gray-100 dark:bg-gray-900">
                                            <a href={await urlGenFactory(true, `edit/pages/${post.slug}`, dashboardRouteOverride)} class="text-green font-bold">Edit</a>
                                        </td>
                                        <td class="px-6 py-4 bg-gray-100 dark:bg-gray-900">
                                            { permissionLevel === 'admin' && <a href={await urlGenFactory(true, `delete/pages/${post.slug}`, dashboardRouteOverride)} class="text-red font-bold">Delete</a> }
                                        </td>
                                    </tr>
                                )
                            })
                        }
                    </tbody>
                </table>
            </div>
        </div>

    </div>
</Layout>

