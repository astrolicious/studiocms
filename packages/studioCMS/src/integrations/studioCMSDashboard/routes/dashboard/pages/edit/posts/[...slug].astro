---
// @ts-expect-error - Some types can only be imported from the Astro runtime
import { Blog, SiteConfig, db, eq } from 'astro:db';
import { Layout } from 'studiocms-dashboard:components';
import Config from 'virtual:studiocms/config';
import { authHelper, urlGenFactory, type Locals } from 'studiocms:helpers';

if (Config.includedIntegrations.useInoxSitemap) {
    import('sitemap-ext:config').then((sitemap) => {
        sitemap.default(false)
    })
}

const { dashboardConfig: { developerConfig, dashboardRouteOverride } } = Config;

const { slug } = Astro.params;

const ConfigArray = await db.select().from(SiteConfig);
const postArrayed = await db.select().from(Blog).where(eq(Blog.slug, slug));

const post = postArrayed[0];

if (!slug || !post) {
	return Astro.redirect(await urlGenFactory(true, undefined, dashboardRouteOverride));
}

const contextConfig = ConfigArray.pop();

const locals = Astro.locals as Locals;
const { permissionLevel } = await authHelper(locals);

// If the user is not logged in, redirect to the login page
if ( !developerConfig.testingAndDemoMode ) {
    if ( permissionLevel === "unknown" ) {
        console.log('User is not logged in. Redirecting to login page.');
        return Astro.redirect(await urlGenFactory(true, "login", dashboardRouteOverride));
    }
    if ( permissionLevel !== 'admin' && permissionLevel !== 'editor' ) {
        console.log('User is not an admin or editor. Redirecting to profile page.');
        return Astro.redirect(await urlGenFactory(true, "profile", dashboardRouteOverride));
    }
}

let showSuccessToast = false;
let showErrorToast = false;

if (Astro.request.method === 'POST' && !developerConfig.testingAndDemoMode) {
  try {
    const data = await Astro.request.formData();
    const title = data.get("title");
    const description = data.get("description");
    const heroImage = data.get("hero-image");
    const content = data.get("content");
	await db
		.update(Blog)
		.set({
			title: title as string,
			description: description as string,
			heroImage: heroImage as string,
			content: content as string,
		})
		.where(eq(Blog.slug, post.slug))
		.then(() => {
            showSuccessToast = true;
		})
		.catch(() => {
            showErrorToast = true;
		});
  } catch (error) {
    if (error instanceof Error) {
        showErrorToast = true;
    }
  }
}

const pageTitle = `Edit Post | ${contextConfig.title}`;
---

<Layout 
    sideBarActiveItemID="edit-posts" 
    title={pageTitle}
    description={contextConfig.description} >
    <div class="alert-toast">
        { showSuccessToast && (
        <sl-alert variant="success" duration="3000" open closable>
            <sl-icon slot="icon" name="check2-circle"></sl-icon>
            <strong>Post Edited!</strong><br />
            You can safely leave this page now.
        </sl-alert>
        )}
        { showErrorToast && (
        <sl-alert variant="danger" duration="3000" open closable>
            <sl-icon slot="icon" name="exclamation-octagon"></sl-icon>
            <strong>Error Editing Post</strong><br />
            There was an Error editing the Post. Please try again.
        </sl-alert>
        )}
    </div>
    <div class="pb-12 mt-5">

        <div class="text-5xl font-bold">Edit Post: {post.title}</div>

        <div class="py-2">

            <center>

                <form method="POST">
                    <label for="title" class="text-lg">Post Title</label><br>
                    <input 
                        type="text" 
                        id="title" 
                        name="title" 
                        class="border-solid border-2 border-gray-300 rounded-lg p-2 w-96"
                        placeholder="Your Post Title" 
                        value={post.title}
                        required><br>
                    <label for="slug" class="text-lg">Slug</label><br>
                    <input 
                        type="text" 
                        id="slug" 
                        name="slug" 
                        value={post.slug}
                        disabled
                        class="border-solid border-2 border-gray-300 rounded-lg p-2 w-96"
                        placeholder="your-post-slug"
                        required><br>
                    <label for="description" class="text-lg">Description</label><br>
                    <input
                        type="text" 
                        id="description" 
                        name="description" 
                        class="border-solid border-2 border-gray-300 rounded-lg p-2 w-96"
                        placeholder="Your post's basic description"
                        value={post.description}
                        required><br>
                    <label for="hero-image" class="text-lg">Hero Image</label><br>
                    <p class="text-sm">To use images stored in your public/ folder use the following example: <pre>/my-image.png</pre></p><br>
                    <input 
                        type="text" 
                        id="hero-image" 
                        name="hero-image" 
                        value={post.heroImage}
                        class="border-solid border-2 border-gray-300 rounded-lg p-2 w-96"
                        placeholder="Your post's hero image URL"
                        value="https://images.unsplash.com/photo-1707345512638-997d31a10eaa?q=80&w=1170&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDF8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
                        required><br>
                    <label for="content" class="text-lg">Content</label><br>
                    <div id="editor">
                        <textarea 
                            id="content" 
                            name="content" 
                            class="border-solid border-2 border-gray-300 rounded-lg p-2 w-full"
                            data-provide="markdown" 
                            rows="10" 
                            placeholder="Your post's content in markdown format."
                            required>{post.content}</textarea>
                    </div><br>
        
                    <button class="btn btn-outline ml-5 py-2">Update Post!</button><br><br>

                </form>
                <div class="text-xl font-bold">Live Preview</div>
                <div id="html-preview" class="border-solid border-2 border-gray-300 rounded-lg p-2 max-w-[100vw] lg:max-w-[1800px] prose"></div><br><br>

            </center>
        </div>

    </div>
</Layout>

<script>
    import Config from 'virtual:studiocms/config';
    import { renderMarked } from '../../../../../../../utils/marked';
    import { renderMarkDoc } from '../../../../../../../utils/markdoc';
    
            document.getElementById('content')?.addEventListener('input', async function () {
                const markdownContent = document.getElementById('content');
                const htmlPreview = document.getElementById('html-preview');

                if (Config.contentRenderer === 'marked' ) {
                    //@ts-ignore
                    const htmlContent = await renderMarked(markdownContent.value);
                    //@ts-ignore
                    htmlPreview.innerHTML = htmlContent;
                } else if (Config.contentRenderer === 'markdoc') {
                    //@ts-ignore
                    const htmlContent = await renderMarkDoc(markdownContent.value);
                    //@ts-ignore
                    htmlPreview.innerHTML = htmlContent;
                }
            });
</script>
