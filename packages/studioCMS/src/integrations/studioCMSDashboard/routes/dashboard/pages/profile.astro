---
// @ts-expect-error - Some types can only be imported from the Astro runtime
import { SiteConfig, db, eq } from 'astro:db';
import { Layout } from 'studiocms-dashboard:components';
import Config from 'virtual:studiocms/config';
import { authHelper, toPascalCase, type Locals, type PageDataAndContent } from 'studiocms:helpers';
import { StudioCMSRoutes } from 'studiocms-dashboard:routeMap'

if (Config.includedIntegrations.useInoxSitemap) {
    import('sitemap-ext:config').then((sitemap) => {
        sitemap.default(false)
    })
}

const { dashboardConfig: { developerConfig } } = Config;

const { 
    authLinks: {
        loginURL
    }, 
    mainLinks: {
        dashboardIndex,
        userProfile
    }
} = StudioCMSRoutes

const contextConfig: PageDataAndContent["SiteConfig"] = await db.select().from(SiteConfig).where(eq(SiteConfig.id, 1)).get();

const locals = Astro.locals as Locals;
const { permissionLevel, name, username, currentUserSession, githubURL } = await authHelper(locals);

// If the user is not logged in, redirect to the login page
if ( !developerConfig.testingAndDemoMode ) {
    if ( permissionLevel === "unknown" ) {
        console.log('User is not logged in. Redirecting to login page.');
        return Astro.redirect(loginURL)
    }
}

// For later project for creating hash to use with gravatar
// const testvar = locals.dbUser.email as string;
// async function digestMessage(message: string) {
//   const msgUint8 = new TextEncoder().encode(message); // encode as (utf-8) Uint8Array
//   const hashBuffer = await crypto.subtle.digest("SHA-256", msgUint8); // hash the message
//   const hashArray = Array.from(new Uint8Array(hashBuffer)); // convert buffer to byte array
//   const hashHex = hashArray
//     .map((b) => b.toString(16).padStart(2, "0"))
//     .join(""); // convert bytes to hex string
//   return hashHex;
// }
// const reponse = await digestMessage(testvar);
// console.log(reponse);


const pageTitle = `User profile | ${contextConfig.title}`;
---

<Layout 
    sideBarActiveItemID="profile" 
    title={pageTitle}
    description={contextConfig.description} >

    <div class="flex grow w-full pb-4">
        <sl-breadcrumb>
            <span slot="separator">/</span>
            <sl-breadcrumb-item href={dashboardIndex}>Dashboard
                <sl-icon slot="prefix" name="columns-gap"></sl-icon>
            </sl-breadcrumb-item>
            <sl-breadcrumb-item href={userProfile}>User Profile</sl-breadcrumb-item>
        </sl-breadcrumb>
    </div>

    <div class="container max-w-[100vw] lg:max-w-[1800px] min-w-[75vw]">

        <div class="text-5xl font-bold text-center py-8">User Profile</div>


        <sl-card class="card-header">
            <div slot="header" class="text-5xl font-bold">
                {username}'s Profile
            </div>
            <div class="py-2">
                <text class="text-lg">
                    <bold>Display Name:</bold> {name}
                </text>
                <br />
                <text class="text-lg">
                    <bold>Role:</bold> {toPascalCase(permissionLevel)}
                </text>
                <br />
                { githubURL && (
                    <text class="text-lg">
                        <bold>GitHub:</bold> <a class="text-blue" href={githubURL}>{username}</a>
                    </text>
                    <br />
                )}
                <text class="text-lg">
                    { currentUserSession && (
                        <p><bold>Session Expires:</bold> {new Date(currentUserSession.expiresAt).toLocaleString()} </p>
                    ) } 
                </text>
            </div>
        </sl-card>


    </div>
</Layout>
