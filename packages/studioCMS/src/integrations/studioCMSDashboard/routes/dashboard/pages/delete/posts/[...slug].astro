---
// @ts-expect-error - Some types can only be imported from the Astro runtime
import { Blog, SiteConfig, db, eq } from 'astro:db';
import BaseLayout from "../../../layouts/Layout.astro";
import Config from 'virtual:studiocms/config';
import { authHelper, type Locals } from 'studiocms:helpers';

if (Config.includedIntegrations.useInoxSitemap) {
    import('sitemap-ext:config').then((sitemap) => {
        sitemap.default(false)
    })
}

const { dashboardConfig: { developerConfig } } = Config;

function redirectToPath(path: string) {
	return Astro.redirect(import.meta.env.BASE_URL + path);
}

const { slug } = Astro.params;

const ConfigArray = await db.select().from(SiteConfig);
const postArrayed = await db.select().from(Blog).where(eq(Blog.slug, slug));

const post = postArrayed[0];

if (!slug || !post) {
	return redirectToPath('dashboard/');
}

const contextConfig = ConfigArray.pop();

const locals = Astro.locals as Locals;
const { permissionLevel } = await authHelper(locals);

// If the user is not logged in, redirect to the login page
if ( !developerConfig.testingAndDemoMode ) {
    if ( permissionLevel === "unknown" ) {
        console.log('User is not logged in. Redirecting to login page.');
        return redirectToPath('dashboard/login');
    }
    if ( permissionLevel !== 'admin' && permissionLevel !== 'editor' ) {
        console.log('User is not an admin or editor. Redirecting to profile page.');
        return redirectToPath('dashboard/profile');
    }
}

if (Astro.request.method === 'POST') {
    if ( developerConfig.testingAndDemoMode ) {
        return new Response('Error: Site configuration cannot be updated in testing and demo mode.', { status: 500 })
    }
	const formData = await new Request(Astro.request.url, {
		method: Astro.request.method,
		headers: Astro.request.headers,
		body: Buffer.from(await Astro.request.arrayBuffer()),
	}).formData();

	const slug = formData.get('slug');

	if (slug === post.slug) {
		await db
			.delete(Blog)
			.where(eq(Blog.slug, post.slug))
			.then(() => {
				return new Response('Post deleted', { status: 200 });
			})
			.catch(() => {
				return new Response('Error deleting post', { status: 500 });
			});

        return redirectToPath('dashboard/');
	}
}

const pageTitle = `New Post | ${contextConfig.title}`;
---
<BaseLayout 
    sideBarActiveItemID="edit-posts" 
    title={pageTitle}
    description={contextConfig.description} >
    <div class="pb-12 mt-5">

        <div class="text-5xl font-bold">Delete Post: {post.title}</div>

        <div class="py-2">
            <text class="text-lg">
                Slug: {post.slug}
            </text>
        </div>

        <div class="py-2">
    
            <form method="post" enctype="multipart/form-data" >
                    
                <label for="slug" class="text-lg">Type the post slug to confirm</label><br>
                <input 
                    type="text" 
                    id="slug" 
                    name="slug" 
                    class="border-solid border-2 border-gray-300 rounded-lg p-2 w-96"
                    placeholder="Your Post Slug (THIS WILL DELETE THE POST)"
                    required><br><br>
    
                <button class="btn btn-outline ml-5 py-2" type="submit">DELETE!</button>
    
            </form>
    
                    
        </div>
    </div>
</BaseLayout>