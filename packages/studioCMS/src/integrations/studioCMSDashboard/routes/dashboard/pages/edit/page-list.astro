---
// @ts-expect-error - Some types can only be imported from the Astro runtime
import { SiteConfig, db, eq, asc, PageData } from 'astro:db';
import { Layout, FormattedDate } from 'studiocms-dashboard:components';
import Config from 'virtual:studiocms/config';
import { authHelper, pluginList, type Locals } from 'studiocms:helpers';
import { StudioCMSRoutes, getEditRoute, getDeleteRoute } from 'studiocms-dashboard:routeMap';
import type { SiteConfigResponse, pageDataReponse } from 'studiocms:components';

const { dashboardConfig: { developerConfig: { testingAndDemoMode } } } = Config;

const { 
    authLinks: { 
        loginURL 
    }, 
    mainLinks: { 
        userProfile,
        dashboardIndex,
        pageEdit,
    } 
} = StudioCMSRoutes;

const contextConfig: SiteConfigResponse = await db.select().from(SiteConfig).where(eq(SiteConfig.id, 1)).get();
const pages: pageDataReponse[] = await db.select().from(PageData).orderBy(asc(PageData.id));
const { permissionLevel } = await authHelper(Astro.locals as Locals);

// If the user is not logged in, redirect to the login page
if ( !testingAndDemoMode ) {
    if ( permissionLevel === "unknown" ) {
        console.log('User is not logged in. Redirecting to login page.');
        return Astro.redirect(loginURL);
    }
    if ( permissionLevel !== 'admin' && permissionLevel !== 'editor' ) {
        console.log('User is not an admin or editor. Redirecting to profile page.');
        return Astro.redirect(userProfile);
    }
}

const fixPackageLabel = ( packageName: string ) => {
    const PluginLabels = Array.from(pluginList.values())

    for (const plugin of PluginLabels) {
        if ( plugin.name === packageName ) {
            return plugin.label;
        }
    }
    return null;
}

const pageTitle = `Existing Pages | ${contextConfig.title}`;
---

<Layout 
    sideBarActiveItemID="edit-pages" 
    title={pageTitle}
    description={contextConfig.description} >

    <div class="flex grow w-full pb-4">
        <sl-breadcrumb>
            <span slot="separator">/</span>
            <sl-breadcrumb-item href={dashboardIndex}>Dashboard
                <sl-icon slot="prefix" name="columns-gap"></sl-icon>
            </sl-breadcrumb-item>
            <sl-breadcrumb-item href={pageEdit}>Existing Pages</sl-breadcrumb-item>
        </sl-breadcrumb>
    </div>

    <div class="container">

        <div class="text-5xl font-bold py-8">Existing Pages</div>

        <div class="py-2">
            <div class="relative">
                <table class="w-full text-left rtl:text-right">
                    <thead class="uppercase bg-base-300 text-inherit">
                        <tr>
                            <th scope="col" class="px-6 py-3">Page Title</th>
                            <th scope="col" class="px-6 py-3">Package Relation</th>
                            <th scope="col" class="px-6 py-3">Publish Date</th>
                            <th scope="col" class="px-6 py-3">Edit</th>
                            <th scope="col" class="px-6 py-3">Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        { 
                            pages.map(async (page) => {
                                return (
                                    <tr class="bg-base-200 text-inherit">
                                        <th scope="row" class="px-6 py-4 font-medium whitespace-nowrap">
                                            {page.title}
                                        </th>
                                        <td class="px-6 py-4">
                                            {fixPackageLabel(page.package)}
                                        </td>
                                        <td class="px-6 py-4">
                                            <FormattedDate date={page.publishedAt}/>
                                        </td>
                                        <td class="px-6 py-4">
                                            <sl-button variant="success" href={await getEditRoute(page.slug)} size="small" type="primary" pill outline>
                                                Edit
                                            </sl-button>
                                        </td>
                                        <td class="px-6 py-4">
                                            { permissionLevel === 'admin' ? <sl-button variant="danger" href={await getDeleteRoute(page.slug)} size="small" type="primary" pill outline>
                                                Delete
                                            </sl-button> : <sl-button variant="danger" href={await getDeleteRoute(page.slug)} size="small" type="primary" pill outline disabled>
                                                Delete
                                            </sl-button> }
                                        </td>
                                    </tr>
                                )
                            })
                        }
                    </tbody>
                </table>
            </div>
        </div>

    </div>
</Layout>

