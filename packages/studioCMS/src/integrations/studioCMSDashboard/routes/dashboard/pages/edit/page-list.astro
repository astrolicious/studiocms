---
// @ts-expect-error - Some types can only be imported from the Astro runtime
import { SiteConfig, Pages, db, eq, asc, PageData } from 'astro:db';
import { Layout } from 'studiocms-dashboard:components';
import Config from 'virtual:studiocms/config';
import { authHelper, urlGenFactory, type Locals } from 'studiocms:helpers';
import { FormattedDate } from 'studiocms:components';

if (Config.includedIntegrations.useInoxSitemap) {
    import('sitemap-ext:config').then((sitemap) => {
        sitemap.default(false)
    })
}

const { dashboardConfig: { developerConfig, dashboardRouteOverride } } = Config;

const contextConfig = await db.select().from(SiteConfig).where(eq(SiteConfig.id, 1)).get();
const pages = await db.select().from(PageData).orderBy(asc(PageData.id));

const locals = Astro.locals as Locals;
const { permissionLevel } = await authHelper(locals);

// If the user is not logged in, redirect to the login page
if ( !developerConfig.testingAndDemoMode ) {
    if ( permissionLevel === "unknown" ) {
        console.log('User is not logged in. Redirecting to login page.');
        return Astro.redirect(await urlGenFactory(true, "login", dashboardRouteOverride));
    }
    if ( permissionLevel !== 'admin' && permissionLevel !== 'editor' ) {
        console.log('User is not an admin or editor. Redirecting to profile page.');
        return Astro.redirect(await urlGenFactory(true, "profile", dashboardRouteOverride));
    }
}

const breadcrumbs = {
    Dashboard: await urlGenFactory(true, '', dashboardRouteOverride),
    ExistingPages: await urlGenFactory(true, 'page-list', dashboardRouteOverride)
}

const pageTitle = `Existing Pages | ${contextConfig.title}`;
---

<Layout 
    sideBarActiveItemID="edit-pages" 
    title={pageTitle}
    description={contextConfig.description} >

    <div class="flex grow w-full pb-4">
        <sl-breadcrumb>
            <span slot="separator">/</span>
            <sl-breadcrumb-item href={breadcrumbs.Dashboard}>Dashboard
                <sl-icon slot="prefix" name="columns-gap"></sl-icon>
            </sl-breadcrumb-item>
            <sl-breadcrumb-item href={breadcrumbs.ExistingPages}>Existing Pages</sl-breadcrumb-item>
        </sl-breadcrumb>
    </div>

    <div class="container max-w-[100vw] lg:max-w-[1800px] min-w-[75vw]">

        <div class="text-5xl font-bold">Existing Pages</div>

        <div class="py-2">
            <div class="relative">
                <table class="w-full text-left rtl:text-right">
                    <thead class="uppercase bg-base-300 text-inherit">
                        <tr>
                            <th scope="col" class="px-6 py-3">Page Title</th>
                            <th scope="col" class="px-6 py-3">Publish Date</th>
                            <th scope="col" class="px-6 py-3">Edit</th>
                            <th scope="col" class="px-6 py-3">Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        { 
                            pages.map(async (page: typeof Pages.$inferSelect) => {
                                return (
                                    <tr class="bg-base-200 text-inherit">
                                        <th scope="row" class="px-6 py-4 font-medium whitespace-nowrap">
                                            {page.title}
                                        </th>
                                        <td class="px-6 py-4">
                                            <FormattedDate date={page.publishedAt}/>
                                        </td>
                                        <td class="px-6 py-4">
                                            <a href={await urlGenFactory(true, `edit/pages/${page.slug}`, dashboardRouteOverride)} class="text-green font-bold">Edit</a>
                                        </td>
                                        <td class="px-6 py-4">
                                            { permissionLevel === 'admin' && <a href={await urlGenFactory(true, `delete/pages/${page.slug}`, dashboardRouteOverride)} class="text-red font-bold">Delete</a> }
                                        </td>
                                    </tr>
                                )
                            })
                        }
                    </tbody>
                </table>
            </div>
        </div>

    </div>
</Layout>

