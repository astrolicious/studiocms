---
// @ts-expect-error - Some types can only be imported from the Astro runtime
import { PageData, PageContent, SiteConfig, db, eq } from 'astro:db';
import { Layout } from 'studiocms-dashboard:components';
import Config from 'virtual:studiocms/config';
import { authHelper, urlGenFactory, type Locals, type PageDataAndContent } from 'studiocms:helpers';
import { StudioCMSRenderer } from 'studiocms:components';

if (Config.includedIntegrations.useInoxSitemap) {
    import('sitemap-ext:config').then((sitemap) => {
        sitemap.default(false)
    })
}

const { dashboardConfig: { developerConfig, dashboardRouteOverride } } = Config;

const { slug } = Astro.params;

const contextConfig = await db.select().from(SiteConfig).where(eq(SiteConfig.id, 1)).get();
const currentPageContent: PageDataAndContent = await db
                                .select()
                                .from(PageContent)
                                .innerJoin(
                                    PageData, 
                                    eq(
                                        PageContent.contentId, 
                                        PageData.id
                                    ))
                                .get();

const { PageContent: pageContent, PageData: pageData } = currentPageContent;

if (!slug || !pageData.id) {
	return Astro.redirect(await urlGenFactory(true, undefined, dashboardRouteOverride));
}

const locals = Astro.locals as Locals;
const { permissionLevel } = await authHelper(locals);

// If the user is not logged in, redirect to the login page
if ( !developerConfig.testingAndDemoMode ) {
    if ( permissionLevel === "unknown" ) {
        console.log('User is not logged in. Redirecting to login page.');
        return Astro.redirect(await urlGenFactory(true, "login", dashboardRouteOverride));
    }
    if ( permissionLevel !== 'admin' && permissionLevel !== 'editor' ) {
        console.log('User is not an admin or editor. Redirecting to profile page.');
        return Astro.redirect(await urlGenFactory(true, "profile", dashboardRouteOverride));
    }
}

let showSuccessToast = false;
let showErrorToast = false;

if (Astro.request.method === 'POST' && !developerConfig.testingAndDemoMode) {
  try {
    const data = await Astro.request.formData();
    const title = data.get("title");
    const pack = data.get("package");
    const description = data.get("description");
    const heroImage = data.get("hero-image");
    const content = data.get("content");
    // const contentLang = data.get("content-lang");

    await db.update(PageData).set({ 
        title: title as string,
        package: pack as string,
        description: description as string,
        heroImage: heroImage as string,
    }).where(eq(PageData.slug, slug)).then(async () => {
        const currentPageContent = await db.select().from(PageContent).innerJoin(PageData, eq(PageContent.contentId, PageData.id)).get();
        await db.update(PageContent).set({ 
            content: content as string 
        }).where(eq(PageContent.contentId, currentPageContent.PageContent.contentId));
    }).catch(() => {
        showErrorToast = true;
    });
    showSuccessToast = true;
  } catch (error) {
    if (error instanceof Error) {
        showErrorToast = true;
    }
  }
}

const LivePreviewPage = await urlGenFactory(true, "api/liverender", dashboardRouteOverride);
const breadcrumbs = {
    Dashboard: await urlGenFactory(true, '', dashboardRouteOverride),
    ExistingPages: await urlGenFactory(true, 'page-list', dashboardRouteOverride),
    CurrentPageLink: await urlGenFactory(true, `edit/pages/${slug}`, dashboardRouteOverride)
}

const pageTitle = `Edit Page | ${contextConfig.title}`;
---

<Layout 
    sideBarActiveItemID="edit-pages" 
    title={pageTitle}
    description={contextConfig.description} >
    <div class="alert-toast">
        { showSuccessToast && (
        <sl-alert variant="success" duration="3000" open closable>
            <sl-icon slot="icon" name="check2-circle"></sl-icon>
            <strong>Post Edited!</strong><br />
            You can safely leave this page now.
        </sl-alert>
        )}
        { showErrorToast && (
        <sl-alert variant="danger" duration="3000" open closable>
            <sl-icon slot="icon" name="exclamation-octagon"></sl-icon>
            <strong>Error Editing Post</strong><br />
            There was an Error editing the Post. Please try again.
        </sl-alert>
        )}
    </div>

    <div class="flex grow w-full pb-4">
        <sl-breadcrumb>
            <span slot="separator">/</span>
            <sl-breadcrumb-item href={breadcrumbs.Dashboard}>Dashboard
                <div slot="prefix" class='i-mdi:view-dashboard-outline inline'></div>
            </sl-breadcrumb-item>
            <sl-breadcrumb-item href={breadcrumbs.ExistingPages}>Existing Pages</sl-breadcrumb-item>
            <sl-breadcrumb-item href={breadcrumbs.CurrentPageLink}>Edit Page: {pageData.title}</sl-breadcrumb-item>
        </sl-breadcrumb>
    </div>

    <div class="container max-w-[100vw] lg:max-w-[1800px] min-w-[75vw]">

        <div class="text-5xl font-bold">Edit Page: {pageData.title}</div>

        <div class="py-2 flex justify-center">

                <form method="POST" class="w-full flex flex-col gap-2">
                    <sl-input
                        id="title"
                        name="title"
                        value={pageData.title}
                        placeholder="Your post title"
                        size="medium"
                        required>
                        <div slot="label" class="text-lg inline">Page Title</div>
                        <sl-icon name="card-heading" slot="prefix"></sl-icon>
                    </sl-input>

                    <sl-select id="package" name="package" value="@astrolicious/studiocms" help-text="This feature has not yet implemented">
                        <div slot="label" class="text-lg inline">Package</div>
                        <sl-option value="@astrolicious/studiocms">@astrolicious/studiocms</sl-option>
                        <sl-option value="not-yet-implemented" disabled>Not Yet Implemented</sl-option>
                    </sl-select>

                    <sl-select id="content-lang" name="content-lang" value="default" help-text="This feature has not yet implemented">
                        <div slot="label" class="text-lg inline">Content Language</div>
                        <sl-option value="default">Default</sl-option>
                        <sl-option value="not-yet-implemented" disabled>Not Yet Implemented</sl-option>
                    </sl-select>

                    <sl-tooltip 
                        placement='top'
                        style="--sl-tooltip-arrow-size: 0; --max-width: 100%;"
                        distance=1
                        hoist>
                        <div slot="content">Page <i>slug</i>'s currently can not be edited after creation.</div>
                        <sl-input
                            id="slug"
                            name="slug"
                            value={pageData.slug}
                            disabled="true"
                            readonly="true"
                            placeholder="your-post-slug"
                            size="medium"
                            required>
                            <div slot="label" class="text-lg inline">Slug</div>
                            <sl-icon name="link" slot="prefix"></sl-icon>
                        </sl-input>
                    </sl-tooltip>
                    
                    <sl-input
                        id="description"
                        name="description"
                        value={pageData.description}
                        placeholder="Your post's basic description"
                        size="medium"
                        required>
                        <div slot="label" class="text-lg inline">Description</div>
                        <sl-icon name="info-circle" slot="prefix"></sl-icon>
                    </sl-input>

                    <sl-input 
                        id="hero-image" 
                        name="hero-image" 
                        value={pageData.heroImage}
                        placeholder="Your Page's Hero Image URL (Also the OGImage)" 
                        size="medium"
                        required>
                        <p slot="help-text" class="text-sm">To use images stored in your public/ folder use the following example: <i>/my-image.png</i></p><br>
                        <div slot="label" class="text-lg inline">Hero Image</div>
                        <sl-icon name="image" slot="prefix"></sl-icon>
                    </sl-input>

                    <sl-textarea 
                        resize="auto"
                        id="content"
                        name="content"
                        value={pageContent.content}
                        size="large"
                        rows="10"
                        hx-get={LivePreviewPage}
                        hx-trigger="keyup changed delay:500ms"
                        hx-target="#html-preview"
                        placeholder="Your post's content in markdown format."
                        required>
                        <div slot="label" class="text-lg inline">Content</div>
                        {pageContent.content}
                    </sl-textarea>
                    <br />

                    <sl-button 
                        variant="success" 
                        type="submit" 
                        class="grow-0 w-48 place-self-center"
                        outline>Update Page!
                        <sl-icon slot="suffix" name="pencil-square"></sl-icon>
                    </sl-button>
        
                </form>
        </div>
        <br />
        <sl-card class="card-header max-w-[100vw] lg:max-w-[1800px] w-full">
            <div slot="header" class="text-xl font-bold">Live Preview</div>
            <div id="html-preview" class="w-full max-w-[100vw] lg:max-w-[1800px] prose md:prose-lg lg:prose-xl">
                <StudioCMSRenderer content={
                    pageContent.content || 
                    `Click in the box above to start editing the content. As you type, the preview will update automatically.`
                    } />
            </div>
          </sl-card>
    </div>
</Layout>


<style>
  
    .card-header [slot='header'] {
      display: flex;
      align-items: center;
      justify-content: space-between;
    }
  
    .card-header h3 {
      margin: 0;
    }
  
  </style>