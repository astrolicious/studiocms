---
import { PageData, PageContent, SiteConfig, db, eq } from 'astro:db';
import { Layout } from 'studiocms-dashboard:components';
import Config from 'virtual:studiocms/config';
import { authHelper, type Locals, type PageDataAndContent } from 'studiocms:helpers';
import { StudioCMSRoutes, getEditRoute } from 'studiocms-dashboard:routeMap';
import type { SiteConfigResponse, pageDataReponse } from 'studiocms:components';
import { CMSSiteConfigId } from '../../../../../../../constVars';
import { Alert, Breadcrumb, BreadcrumbItem, Icon } from 'astrolace:components';
import PageEditAndCreateForm from '../../../components/PageEditAndCreateForm.astro';

const { dashboardConfig: { developerConfig } } = Config;

const { 
    authLinks: { 
        loginURL 
    }, 
    mainLinks: { 
        userProfile,
        dashboardIndex,
        pageEdit,
        livePreviewBox
    } 
} = StudioCMSRoutes;

const { slug } = Astro.params;

const contextConfig: SiteConfigResponse = await db.select().from(SiteConfig).where(eq(SiteConfig.id, CMSSiteConfigId)).get();
const pageData: pageDataReponse = await db.select().from(PageData).where(eq(PageData.slug, slug)).get();
const pageContent: PageDataAndContent["PageContent"] = await db.select().from(PageContent).where(eq(PageContent.contentId, pageData.id)).get();

if (!slug || !pageData.id) {
	return Astro.redirect(dashboardIndex);
}

const editRoute = await getEditRoute(slug);
const { permissionLevel } = await authHelper(Astro.locals as Locals);

// If the user is not logged in, redirect to the login page
if ( !developerConfig.testingAndDemoMode ) {
    if ( permissionLevel === "unknown" ) {
        console.log('User is not logged in. Redirecting to login page.');
        return Astro.redirect(loginURL);
    }
    if ( permissionLevel !== 'admin' && permissionLevel !== 'editor' ) {
        console.log('User is not an admin or editor. Redirecting to profile page.');
        return Astro.redirect(userProfile);
    }
}

let showSuccessToast = false;
let showErrorToast = false;

if (Astro.request.method === 'POST' && !developerConfig.testingAndDemoMode) {
  try {
    const data = await Astro.request.formData();
    const title = data.get("title");
    const pack = data.get("package");
	const showOnNav = data.get('show-on-nav');
    const description = data.get("description");
    const heroImage = data.get("hero-image");
    const content = data.get("content");
    // const contentLang = data.get("content-lang");

    await db.update(PageData).set({ 
        title: title as string,
        package: pack as string,
        description: description as string,
        showOnNav: showOnNav  === "on",
        updatedAt: new Date(),
        heroImage: heroImage as string,
    }).where(eq(PageData.slug, slug)).then(async () => {
        await db.update(PageContent).set({ 
            content: content as string 
        }).where(eq(PageContent.contentId, pageData.id));
    }).catch(() => {
        showErrorToast = true;
    });
    showSuccessToast = true;
  } catch (error) {
    if (error instanceof Error) {
        showErrorToast = true;
    }
  }
}

const pageTitle = `Edit Page | ${contextConfig.title}`;
---

<Layout 
    sideBarActiveItemID="edit-pages" 
    title={pageTitle}
    description={contextConfig.description} >
    <div class="alert-toast">
        { showSuccessToast && (
        <Alert variant="success" duration={3000} open closable>
            <Icon slot="icon" name="check2-circle"/>
            <strong>Page Edited</strong>
            <p>You can safely leave this page now.</p>
        </Alert>
        )}
        { showErrorToast && (
        <Alert variant="danger" duration={3000} open closable>
            <Icon slot="icon" name="exclamation-octagon" />
            <strong>Error Editing Page</strong>
            <p>There was an Error editing the Post. Please try again.</p>
        </Alert>
        )}
    </div>

    <div class="flex grow w-full">
        <Breadcrumb>
            <BreadcrumbItem href={dashboardIndex} prefix='columns-gap'>
                Dashboard
            </BreadcrumbItem>
            <BreadcrumbItem href={pageEdit}'>
                Existing Pages
            </BreadcrumbItem>
            <BreadcrumbItem href={editRoute}'>
                Edit Page: {pageData.title}
            </BreadcrumbItem>
        </Breadcrumb>
    </div>

    <PageEditAndCreateForm 
        pageData={pageData} 
        pageContent={pageContent} 
        livePreviewBox={livePreviewBox} 
        isEditPage />
</Layout>
