---
import { Permissions, db } from 'astro:db';
import { Layout } from 'studiocms-dashboard:components';
import Config from 'virtual:studiocms/config';
import { authHelper, toPascalCase, type Locals } from 'studiocms:helpers';
import { StudioCMSRoutes } from 'studiocms-dashboard:routeMap'
import { Alert, Button, Divider, Icon, Input, Radio, RadioGroup } from 'astrolace:components';
import { getSiteConfig, getPermissionsList } from 'studiocms-dashboard:contentHelper';
import CrumbStack from '../../components/CrumbStack.astro';

const { dashboardConfig: { developerConfig } } = Config;

const { 
    mainLinks: { 
        dashboardIndex,
        siteConfiguration,
        configurationAdmins
    } 
} = StudioCMSRoutes;

const adminList = await getPermissionsList();
const contextConfig = await getSiteConfig();
const { permissionLevel } = await authHelper(Astro.locals as Locals);

// If the user is not logged in, redirect to the login page
if ( !developerConfig.testingAndDemoMode ) {
    if ( permissionLevel === "unknown" ) {
        console.log('User is not logged in. Redirecting to login page.');
        return Astro.redirect(StudioCMSRoutes.authLinks.loginURL);
    }
    if ( permissionLevel !== 'admin' ) {
        console.log('User is not an admin. Redirecting to profile page.');
        return Astro.redirect(StudioCMSRoutes.mainLinks.userProfile);
    }
}

let showSuccessToast = false;
let showErrorToast = false;

if (Astro.request.method === 'POST' && !developerConfig.testingAndDemoMode) {
    try {
        const data = await Astro.request.formData();
        const newUser = data.get('username');
        const rank = data.get('rank');

        await db
            .insert(Permissions)
            .values({
                username: newUser as string,
                rank: rank as string,
            })
            .then(() => {
                showSuccessToast = true;
            })
            .catch(() => {
                showErrorToast = true;
            });
    } catch (error) {
        if (error instanceof Error) {
            showErrorToast = true;
        }
    }
}

const pageTitle = `Site Config | ${contextConfig.title}`;
---

<Layout 
    sideBarActiveItemID="site-config" 
    title={pageTitle}
    description={contextConfig.description} >

    <CrumbStack items={[
        { href: dashboardIndex, text: 'Dashboard', prefix: 'columns-gap' },
        { href: siteConfiguration, text: 'Site Configuration' },
        { href: configurationAdmins, text: 'Site Admins' }
    ]} />

    <div class="alert-toast">
        { showSuccessToast && (
        <Alert variant="success" duration={3000} open closable>
            <Icon slot="icon" name="check2-circle" />
            <strong>New Admin Added</strong>
            <p>You can safely leave this page now.</p>
        </Alert>
        )}
        { showErrorToast && (
        <Alert variant="danger" duration={3000} open closable>
            <Icon slot="icon" name="exclamation-octagon" />
            <strong>Error adding Admin</strong>
            <p>There was an Error adding the new Admin. Please try again.</p>
        </Alert>
        )}
    </div>
    <div class="container flex flex-col">

        <h1 class="text-5xl font-bold py-8">Site Admins</h1>

        <div class="py-2">
            <div class="text-xl">Current Admins:</div>

            <div class="relative">
                <table class="w-full text-left rtl:text-right">
                    <thead class="uppercase bg-base-300 text-inherit">
                        <tr>
                            <th scope="col" class="px-6 py-3">Username</th>
                            <th scope="col" class="px-6 py-3">Rank</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            adminList.map((admin: typeof Permissions.$inferSelect) => {
                                return (
                                    <tr class="bg-base-200 text-inherit">
                                        <th scope="row" class="px-6 py-4 font-medium whitespace-nowrap">{admin.username}</th>
                                        {
                                            admin.rank === 'admin' ? 
                                            <td class="px-6 py-4 text-yellow font-bold drop-shadow-md">{toPascalCase(admin.rank)}</td> :
                                            <td class="px-6 py-4 text-blue font-bold drop-shadow-md">{toPascalCase(admin.rank)}</td>
                                        }
                                    </tr>
                                )
                            })
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="py-2">
            <span>
                Note: To delete admins you can do this from your Astro Studio Dashboard.
            </span>
        </div>

        <div class="py-2 grow gap-2">
            <form method="POST">
        
                <Input
                    id="username"
                    name="username"
                    placeholder="Username"
                    size="medium"
                    required>
                    <div slot="label" class="text-lg inline">Add New Admin or Editor</div>
                    <Icon name="person-circle" slot="prefix" />
                </Input>

                <Divider />

                <RadioGroup
                    name="rank"
                    id="rank"
                    value="editor"
                    label='User Permission Level'
                    helpText='Admins get Full control, while Editors can only Edit and create.'
                    required>
                    <Radio value='editor'>Editor</Radio>
                    <Radio value='admin'>Admin</Radio>
                </RadioGroup>
    
                <div class="py-4 text-center">
                    <Button variant="success" type="submit" outline>Add User</Button>
                </div>
    
            </form>
        </div>

    </div>
</Layout>

