---
import { Layout } from 'studiocms-dashboard:components';
import { authHelper, toPascalCase, type Locals } from 'studiocms:helpers';
import { StudioCMSRoutes } from 'studiocms-dashboard:routeMap';
import { Alert, Button, Divider, Icon, Input, Radio, RadioGroup } from 'astrolace:components';
import { getSiteConfig, getPermissionsList } from 'studiocms-dashboard:contentHelper';
import CrumbStack from '../../components/CrumbStack.astro';
import { makePageTitle } from '../../../../utils/makePageTitle';
import { logger } from '@it-astro:logger:StudioCMS';

const {
	mainLinks: { dashboardIndex, siteConfiguration, configurationAdmins },
	endpointLinks: {
		config: { adminConfig: adminConfigEndpoint },
	},
} = StudioCMSRoutes;

const adminList = await getPermissionsList();
const contextConfig = await getSiteConfig();
const { permissionLevel } = await authHelper(Astro.locals as Locals);

// Check Permission Level
if (permissionLevel !== 'admin') {
	logger.info('User is not an admin. Redirecting to profile page.');
	return Astro.redirect(StudioCMSRoutes.mainLinks.userProfile);
}
---

<Layout 
    sideBarActiveItemID="site-config" 
    title={makePageTitle("Site Config", contextConfig)}
    description={contextConfig.description} >

    <CrumbStack items={[
        { href: dashboardIndex, text: 'Dashboard', prefix: 'columns-gap' },
        { href: siteConfiguration, text: 'Site Configuration' },
        { href: configurationAdmins, text: 'Site Admins' }
    ]} />

    <div class="container flex flex-col">

        <h1 class="text-5xl font-bold py-8">Site Admins</h1>

        <div class="py-2">
            <div class="text-xl">Current Admins:</div>

            <div class="relative">
                <table class="w-full text-left rtl:text-right">
                    <thead class="uppercase bg-base-300 text-inherit">
                        <tr>
                            <th scope="col" class="px-6 py-3">Username</th>
                            <th scope="col" class="px-6 py-3">Rank</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            adminList.map((admin) => {
                                return (
                                    <tr class="bg-base-200 text-inherit">
                                        <th scope="row" class="px-6 py-4 font-medium whitespace-nowrap">{admin.username}</th>
                                        {
                                            admin.rank === 'admin' ? 
                                            <td class="px-6 py-4 text-yellow font-bold drop-shadow-md">{toPascalCase(admin.rank)}</td> :
                                            <td class="px-6 py-4 text-blue font-bold drop-shadow-md">{toPascalCase(admin.rank)}</td>
                                        }
                                    </tr>
                                )
                            })
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="py-2">
            <span>
                Note: To delete admins you can do this from your Astro Studio Dashboard.
            </span>
        </div>

        <div class="py-2 grow gap-2">
            <form method="POST" id="admins-form" action={adminConfigEndpoint}>
        
                <Input
                    id="username"
                    name="username"
                    placeholder="Username"
                    size="medium"
                    required>
                    <div slot="label" class="text-lg inline">Add New Admin or Editor</div>
                    <Icon name="person-circle" slot="prefix" />
                </Input>

                <Divider />

                <RadioGroup
                    name="rank"
                    id="rank"
                    value="editor"
                    label='User Permission Level'
                    helpText='Admins get Full control, while Editors can only Edit and create.'
                    required>
                    <Radio value='editor'>Editor</Radio>
                    <Radio value='admin'>Admin</Radio>
                </RadioGroup>
    
                <div class="py-4 text-center">
                    <Button variant="success" type="submit" outline>Add User</Button>
                </div>
    
            </form>
        </div>

        <Alert id="form-error" variant="danger" duration={4000} closable>
            <Icon slot="icon" name="exclamation-octagon" />
            <strong>Something went wrong!</strong>
            <Divider />
            <div id="form-error-message"></div>
          </Alert>
          <Alert id="form-success" variant="success" duration={4000} closable>
            <Icon slot="icon" name="check2-circle" />
            <strong>Success!</strong>
            <Divider />
            <div id="form-success-message"></div>
          </Alert>

    </div>
</Layout>


<script>
    import type { SlAlert } from "astrolace:types";
    
        const adminsForm = document.getElementById('admins-form') as HTMLFormElement;
        const formError = document.getElementById('form-error') as SlAlert;
        const formErrorMessage = document.getElementById('form-error-message') as HTMLDivElement;
        const formSuccess = document.getElementById('form-success') as SlAlert;
        const formSuccessMessage = document.getElementById('form-success-message') as HTMLDivElement;
    
        adminsForm.addEventListener('submit', async (e) => {
            e.preventDefault();
    
            const formElement = e.target as HTMLFormElement;
            const response = await fetch(formElement.action, {
                method: formElement.method,
                body: new FormData(formElement)
            });
    
            if (response.ok) {
                formSuccessMessage.innerText = (await response.json()).message;
                formSuccess.toast();
                setTimeout(() => {
                    window.location.reload();
                }, 4000)
            } else {
                formErrorMessage.innerText = (await response.json()).error;
                formError.toast();
            }
    
        })
    </script>