---
// @ts-expect-error - Some types can only be imported from the Astro runtime
import { Permissions, SiteConfig, db, eq } from 'astro:db';
import { Layout } from 'studiocms-dashboard:components';
import Config from 'virtual:studiocms/config';
import { authHelper, toPascalCase, type Locals, type PageDataAndContent } from 'studiocms:helpers';
import { StudioCMSRoutes } from 'studiocms-dashboard:routeMap'
import type { SiteConfigResponse } from 'studiocms:components';

if (Config.includedIntegrations.useInoxSitemap) {
    import('sitemap-ext:config').then((sitemap) => {
        sitemap.default(false)
    })
}

const { dashboardConfig: { developerConfig } } = Config;

const { 
    authLinks: { 
        loginURL 
    }, 
    mainLinks: { 
        userProfile,
        dashboardIndex,
        siteConfiguration,
        configurationAdmins
    } 
} = StudioCMSRoutes;

const adminList: PageDataAndContent["Permissions"][] = await db.select().from(Permissions);
const contextConfig: SiteConfigResponse = await db.select().from(SiteConfig).where(eq(SiteConfig.id, 1)).get();
const { permissionLevel } = await authHelper(Astro.locals as Locals);

// If the user is not logged in, redirect to the login page
if ( !developerConfig.testingAndDemoMode ) {
    if ( permissionLevel === "unknown" ) {
        console.log('User is not logged in. Redirecting to login page.');
        return Astro.redirect(loginURL);
    }
    if ( permissionLevel !== 'admin' ) {
        console.log('User is not an admin. Redirecting to profile page.');
        return Astro.redirect(userProfile);
    }
}

let showSuccessToast = false;
let showErrorToast = false;

if (Astro.request.method === 'POST' && !developerConfig.testingAndDemoMode) {
    try {
        const data = await Astro.request.formData();
        const newUser = data.get('username');
        const rank = data.get('rank');

        await db
            .insert(Permissions)
            .values({
                username: newUser as string,
                rank: rank as string,
            })
            .then(() => {
                showSuccessToast = true;
            })
            .catch(() => {
                showErrorToast = true;
            });
    } catch (error) {
        if (error instanceof Error) {
            showErrorToast = true;
        }
    }
}

const pageTitle = `Site Config | ${contextConfig.title}`;
---

<Layout 
    sideBarActiveItemID="site-config" 
    title={pageTitle}
    description={contextConfig.description} >
    <div class="flex grow w-full pb-4">
        <sl-breadcrumb>
            <span slot="separator">/</span>
            <sl-breadcrumb-item href={dashboardIndex}>Dashboard
                <sl-icon slot="prefix" name="columns-gap"></sl-icon>
            </sl-breadcrumb-item>
            <sl-breadcrumb-item href={siteConfiguration}>Site Configuration</sl-breadcrumb-item>
            <sl-breadcrumb-item href={configurationAdmins}>Site Admins</sl-breadcrumb-item>
        </sl-breadcrumb>
    </div>
    <div class="alert-toast">
        { showSuccessToast && (
        <sl-alert variant="success" duration="3000" open closable>
            <sl-icon slot="icon" name="check2-circle"></sl-icon>
            <strong>New Admin Added!</strong><br />
            You can safely leave this page now.
        </sl-alert>
        )}
        { showErrorToast && (
        <sl-alert variant="danger" duration="3000" open closable>
            <sl-icon slot="icon" name="exclamation-octagon"></sl-icon>
            <strong>Error adding Admin!</strong><br />
            There was an Error adding the new Admin. Please try again.
        </sl-alert>
        )}
    </div>
    <div class="container max-w-[100vw] lg:max-w-[1800px] min-w-[75vw] flex flex-col">

        <div class="text-5xl font-bold py-8">Site Admins</div>

        <div class="py-2">
            <div class="text-xl">Current Admins:</div>

            <div class="relative">
                <table class="w-full text-left rtl:text-right">
                    <thead class="uppercase bg-base-300 text-inherit">
                        <tr>
                            <th scope="col" class="px-6 py-3">Username</th>
                            <th scope="col" class="px-6 py-3">Rank</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            adminList.map((admin: typeof Permissions.$inferSelect) => {
                                return (
                                    <tr class="bg-base-200 text-inherit">
                                        <th scope="row" class="px-6 py-4 font-medium whitespace-nowrap">{admin.username}</th>
                                        {
                                            admin.rank === 'admin' ? 
                                            <td class="px-6 py-4 text-yellow font-bold drop-shadow-md">{toPascalCase(admin.rank)}</td> :
                                            <td class="px-6 py-4 text-blue font-bold drop-shadow-md">{toPascalCase(admin.rank)}</td>
                                        }
                                    </tr>
                                )
                            })
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div class="py-2">
            <text>
                Note: To delete admins you can do this from your Astro Studio Dashboard.
            </text>
        </div>

        <div class="py-2 grow">
            <form method="POST">
        
                <sl-input
                    id="username"
                    name="username"
                    placeholder="Username"
                    size="medium"
                    class="py-2"
                    required>
                    <div slot="label" class="text-lg inline">Add New Admin or Editor</div>
                    <sl-icon name="person-circle" slot="prefix"></sl-icon>
                </sl-input>

                <sl-radio-group 
                    name="rank" 
                    id="rank" 
                    value="editor" 
                    required>
                    <div slot="label" class="text-lg inline">User Permission Level</div>
                    <p slot="help-text">Admin's get Full control, while Editors can only Edit and create!</p>
                    <sl-radio value="editor">Editor</sl-radio>
                    <sl-radio value="admin">Admin</sl-radio>
                  </sl-radio-group>
    
                <div class="py-4 text-center">
                    <sl-button variant="success" type="submit" outline>Add User!</sl-button>
                </div>
    
            </form>
        </div>

    </div>
</Layout>

