---
import { SiteConfig, db, eq } from 'astro:db';
import { Layout } from 'studiocms-dashboard:components';
import Config from 'virtual:studiocms/config';
import { authHelper, type Locals } from 'studiocms:helpers';
import { StudioCMSRoutes } from 'studiocms-dashboard:routeMap'
import { Alert, Button, Divider, Icon, Input } from 'astrolace:components';
import { getSiteConfig } from 'studiocms-dashboard:contentHelper';
import CrumbStack from '../../components/CrumbStack.astro';

const { dashboardConfig: { developerConfig } } = Config;

const { 
    mainLinks: { 
        dashboardIndex,
        siteConfiguration,
        configurationAdmins
    } 
} = StudioCMSRoutes;

const contextConfig = await getSiteConfig();
const { permissionLevel } = await authHelper(Astro.locals as Locals);

// If the user is not logged in, redirect to the login page
if ( !developerConfig.testingAndDemoMode ) {
    if ( permissionLevel === "unknown" ) {
        console.log('User is not logged in. Redirecting to login page.');
        return Astro.redirect(StudioCMSRoutes.authLinks.loginURL);
    }
    if ( permissionLevel !== 'admin' ) {
        console.log('User is not an admin. Redirecting to profile page.');
        return Astro.redirect(StudioCMSRoutes.mainLinks.userProfile);
    }
}

let showSuccessToast = false;
let showErrorToast = false;

if (Astro.request.method === 'POST' && !developerConfig.testingAndDemoMode) {
    try {
        const data = await Astro.request.formData();
        const title = data.get('title');
        const description = data.get('description');
        // Update the site configuration
        await db
            .update(SiteConfig)
            .set({
                title: title as string,
                description: description as string,
            })
            .where(eq(SiteConfig.id, 1))
            .then(() => {
                showSuccessToast = true;
            })
            .catch(() => {
                showErrorToast = true;
            });
    } catch (error) {
        if (error instanceof Error) {
            showErrorToast = true;
        }
    }
}


const pageTitle = `Site Config | ${contextConfig.title}`;
---

<Layout 
    sideBarActiveItemID="site-config" 
    title={pageTitle}
    description={contextConfig.description} >

    <CrumbStack items={[
        { href: dashboardIndex, text: 'Dashboard', prefix: 'columns-gap' },
        { href: siteConfiguration, text: 'Site Configuration' }
    ]} />

    <div class="alert-toast">
        { showSuccessToast && (
        <Alert variant="success" duration={3000} open closable>
            <Icon slot="icon" name="check2-circle"></Icon>
            <strong>Site Config Updated</strong>
            <p>You can safely leave this page now.</p>
        </Alert>
        )}
        { showErrorToast && (
        <Alert variant="danger" duration={3000} open closable>
            <Icon slot="icon" name="exclamation-octagon"></Icon>
            <strong>Error Updating Site Config</strong>
            <p>There was an Error editing the site config. Please try again.</p>
        </Alert>
        )}
    </div>
    <div class="container flex flex-col">

        <h1 class="text-5xl font-bold grow py-8">Site Configuration</h1>

        <div class="py-4 text-center">
            <Button variant="warning" href={configurationAdmins} outline>Manage Admins</Button>
        </div>

        <div class="py-2 grow">
            <form method="post" enctype="multipart/form-data" >

                <Input
                    id="title"
                    name="title"
                    placeholder="Site Title"
                    size="medium"
                    value={contextConfig.title} 
                    label='Site Title'
                    required>
                    <Icon name="globe2" slot="prefix"></Icon> {/* Bug in Astrolace, need to add a prefix and suffix slot to the Icon Compomponent */}
                </Input>

                <Divider />

                <Input
                    id="description"
                    name="description"
                    placeholder="Site Description"
                    size="medium"
                    value={contextConfig.description} 
                    label='Description'
                    required>
                    <Icon name="line" slot="prefix"></Icon> {/* Bug in Astrolace, need to add a prefix and suffix slot to the Icon Compomponent */}
                </Input>
    
                <div class="py-4 text-center">
                    <Button variant="success" type="submit" outline>Update</Button>
                </div>
    
            </form>
        </div>
    </div>
</Layout>