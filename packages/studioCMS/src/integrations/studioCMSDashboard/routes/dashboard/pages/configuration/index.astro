---
import { Layout } from 'studiocms-dashboard:components';
import { authHelper, type Locals } from 'studiocms:helpers';
import { StudioCMSRoutes } from 'studiocms-dashboard:routeMap';
import { Alert, Button, Divider, Icon, Input } from 'astrolace:components';
import { getSiteConfig } from 'studiocms-dashboard:contentHelper';
import CrumbStack from '../../components/CrumbStack.astro';
import { makePageTitle } from '../../../../utils/makePageTitle';
import { logger } from '@it-astro:logger:StudioCMS';

const {
	mainLinks: { dashboardIndex, siteConfiguration, configurationAdmins },
	endpointLinks: {
		config: { siteConfig: siteConfigEndpoint },
	},
} = StudioCMSRoutes;

const contextConfig = await getSiteConfig();
const { permissionLevel } = await authHelper(Astro.locals as Locals);

// Check Permission Level
if (permissionLevel !== 'admin') {
	logger.info('User is not an admin. Redirecting to profile page.');
	return Astro.redirect(StudioCMSRoutes.mainLinks.userProfile);
}
---

<Layout 
    sideBarActiveItemID="site-config" 
    title={makePageTitle("Site Config", contextConfig)}
    description={contextConfig.description} >

    <CrumbStack items={[
        { href: dashboardIndex, text: 'Dashboard', prefix: 'columns-gap' },
        { href: siteConfiguration, text: 'Site Configuration' }
    ]} />

    <div class="container flex flex-col">

        <h1 class="text-5xl font-bold grow py-8">Site Configuration</h1>

        <div class="py-4 text-center">
            <Button variant="warning" href={configurationAdmins} outline>Manage Admins</Button>
        </div>

        <div class="py-2 grow">
            <form method="post" id="config-form" enctype="multipart/form-data" action={siteConfigEndpoint}>

                <Input
                    id="title"
                    name="title"
                    placeholder="Site Title"
                    size="medium"
                    value={contextConfig.title} 
                    label='Site Title'
                    required>
                    <Icon name="globe2" slot="prefix"></Icon>
                </Input>

                <Divider />

                <Input
                    id="description"
                    name="description"
                    placeholder="Site Description"
                    size="medium"
                    value={contextConfig.description} 
                    label='Description'
                    required>
                    <Icon name="line" slot="prefix"></Icon>
                </Input>
    
                <div class="py-4 text-center">
                    <Button variant="success" type="submit" outline>Update</Button>
                </div>
    
            </form>
        </div>


      <Alert id="form-error" variant="danger" duration={4000} closable>
        <Icon slot="icon" name="exclamation-octagon" />
        <strong>Something went wrong!</strong>
        <Divider />
        <div id="form-error-message"></div>
      </Alert>
      <Alert id="form-success" variant="success" duration={4000} closable>
        <Icon slot="icon" name="check2-circle" />
        <strong>Success!</strong>
        <Divider />
        <div id="form-success-message"></div>
      </Alert>

    </div>
</Layout>

<script is:inline>
// import type { SlAlert } from "astrolace:types";

    const configForm = document.getElementById('config-form');
    const formError = document.getElementById('form-error');
    const formErrorMessage = document.getElementById('form-error-message');
    const formSuccess = document.getElementById('form-success');
    const formSuccessMessage = document.getElementById('form-success-message');

    configForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        console.log("Form submission prevented");

        const formElement = e.target;
        console.log("Form action:", formElement.action);
        console.log("Form method:", formElement.method);

        try {
            const response = await fetch(formElement.action, {
                method: formElement.method,
                body: new FormData(formElement)
            });

            console.log("Response status:", response.status);

            const responseData = await response.json();
            console.log("Response data:", responseData);

            if (response.ok) {
                formSuccessMessage.innerText = responseData.message;
                formSuccess.toast();
                console.log("Success toast triggered");
                setTimeout(() => {
                    window.location.reload();
                }, 4000);
            } else {
                formErrorMessage.innerText = responseData.error;
                formError.toast();
                console.log("Error toast triggered");
            }
        } catch (error) {
            console.error("Fetch error:", error);
            formErrorMessage.innerText = "An unexpected error occurred.";
            formError.toast();
        }
    });
</script>