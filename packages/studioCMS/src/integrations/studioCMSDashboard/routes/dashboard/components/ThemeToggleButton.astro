---
/* This button will switch between the default theme and the opposite of that
 *
 * If the default theme is auto it will toggle between auto and the opposite of the systemTheme
 *
 * If the default theme is not auto it will never enter auto mode
 *
 * Set the themeIconRelationship to determine the behavior of the icon, match will have moon icon displayed while dark theme is active
 *
 */

 type Props = {
	themeIconRelationship?: 'match' | 'opposite' | undefined;
};

const { themeIconRelationship = 'opposite' } = Astro.props;
---

<theme-toggle-button></theme-toggle-button>

<script is:inline data-theme-icon-relationship={themeIconRelationship}>
  if (!customElements.get("theme-toggle-button")) {
    const themeIconRelationship = document.currentScript.getAttribute(
      "data-theme-icon-relationship"
    );
    class ThemeToggleButton extends HTMLElement {
      constructor() {
        super();
        this.attachShadow({ mode: "open" });
        this.toggleTheme = this.toggleTheme.bind(this);
        this.updateThemeIconAndAriaLabel =
          this.updateThemeIconAndAriaLabel.bind(this);
      }

      connectedCallback() {
        this.render();
        this.bindEvents();
        this.updateThemeIconAndAriaLabel();
      }

      disconnectedCallback() {
        this.removeEventListener("click", this.toggleTheme);
        document.removeEventListener(
          "theme-changed",
          this.updateThemeIconAndAriaLabel
        );
      }

      render() {
        this.shadowRoot.innerHTML = `
                <style>
                    button {
                        background-color: transparent;
                        border: none;
                        color: inherit;
                        width: 2.5rem;
                        height: auto;
                        cursor: pointer;
                    }
                    svg {
                      stroke: currentColor;
                      fill: none;
                      stroke-width: 1.5;
                    }
                    svg path {
                      stroke-linecap: round;
                      stroke-linejoin: round;
                    }
                </style>
                <button>
                    <svg viewBox="0 0 24 24" id="moon" aria-hidden="true">
                        <path d="M21.752 15.002A9.72 9.72 0 0 1 18 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 0 0 3 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 0 0 9.002-5.998Z"></path>
                    </svg>
                    <svg viewBox="0 0 24 24" id="sun" aria-hidden="true">
                        <path d="M12 3v2.25m6.364.386-1.591 1.591M21 12h-2.25m-.386 6.364-1.591-1.591M12 18.75V21m-4.773-4.227-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0Z"></path>
                    </svg>
                </button>
                `;
        this.updateThemeIconAndAriaLabel();
      }

      bindEvents() {
        this.addEventListener("click", this.toggleTheme);
        document.addEventListener("theme-changed", (e) =>
          this.updateThemeIconAndAriaLabel(
            e.detail.currentTheme,
            e.detail.systemTheme
          )
        );
      }

      toggleTheme() {
        const currentTheme = theme.getTheme();
        const defaultTheme = theme.getDefaultTheme();
        const systemTheme = theme.getSystemTheme();
        let newTheme;

        if (defaultTheme === "auto") {
          newTheme =
            currentTheme === "auto" || currentTheme === systemTheme
              ? systemTheme === "dark"
                ? "light"
                : "dark"
              : "auto";
        } else {
          newTheme =
            currentTheme === defaultTheme
              ? defaultTheme === "dark"
                ? "light"
                : "dark"
              : currentTheme === "auto"
                ? systemTheme === "dark"
                  ? "light"
                  : "dark"
                : defaultTheme;
        }

        theme.setTheme(newTheme);
        this.updateThemeIconAndAriaLabel(newTheme, systemTheme);
      }

      updateThemeIconAndAriaLabel(
        currentTheme = theme.getTheme(),
        systemTheme = theme.getSystemTheme()
      ) {
        const sunIcon =
          themeIconRelationship === "opposite"
            ? this.shadowRoot.querySelector("#sun")
            : this.shadowRoot.querySelector("#moon");
        const moonIcon =
          themeIconRelationship === "opposite"
            ? this.shadowRoot.querySelector("#moon")
            : this.shadowRoot.querySelector("#sun");

        sunIcon.style.display =
          currentTheme === "dark" ||
          (currentTheme === "auto" && systemTheme === "dark")
            ? "block"
            : "none";
        moonIcon.style.display =
          currentTheme === "light" ||
          (currentTheme === "auto" && systemTheme === "light")
            ? "block"
            : "none";
        const newMode =
          currentTheme === "dark" ||
          (currentTheme === "auto" && systemTheme === "dark")
            ? "light"
            : "dark";
        this.shadowRoot
          .querySelector("button")
          .setAttribute(
            "aria-label",
            `Theme toggle button: click to activate ${newMode} mode`
          );
      }
    }

    customElements.define("theme-toggle-button", ThemeToggleButton);
  }
</script>