---
import { Card, Icon, ProgressBar } from "astrolace:components";
import type { WebVitalsResponseItem } from "studiocms-dashboard:web-vitals";

interface Props {
    lcpData: WebVitalsResponseItem[];
    clsData: WebVitalsResponseItem[];
    inpData: WebVitalsResponseItem[];
}

const { lcpData, clsData, inpData } = Astro.props;

function msToSeconds(ms: number): number {
    return ms / 1000;
}

function calculateClsAverage(clsValues: number[]): number {

    const sum = clsValues.reduce((acc, curr) => acc + curr, 0);
    const average = sum / clsValues.length;
    
    // Round average to two decimal places
    return Math.round(average * 100) / 100;
}

const clsDataAverage = (webVitalData: WebVitalsResponseItem[]) => {
    const clsData: number[] = [];
    if (webVitalData) {
        for (const item of webVitalData) {
            if (item.name === "CLS") {
                clsData.push(item.value);
            }
        }
    }
    return calculateClsAverage(clsData);
};

function calculateClsScore(cls: number): number {
    if (cls <= 0.1) {
        return 100; // Excellent
    }if (cls <= 0.25) {
        return Math.round(100 - ((cls - 0.1) / (0.25 - 0.1)) * 25); // Good to Excellent
    }if (cls <= 0.5) {
        return Math.round(75 - ((cls - 0.25) / (0.5 - 0.25)) * 25); // Fair to Good
    }
    return Math.round(50 - ((cls - 0.5) / (1 - 0.5)) * 50); // Poor to Fair
}

function calculateLcpAverage(lcpValues: number[]): number {
    if (lcpValues.length === 0) {
        throw new Error("Array must not be empty.");
    }

    const sum = lcpValues.reduce((acc, curr) => acc + curr, 0);
    const average = sum / lcpValues.length;
    
    // Round average to two decimal places
    return Math.round(average * 100) / 100;
}

const lcpDataAverage = (webVitalData: WebVitalsResponseItem[]) => {
    const lcpData: number[] = [];
    if (webVitalData) {
        for (const item of webVitalData) {
            if (item.name === "LCP") {
                lcpData.push(item.value);
            }
        }
    }
    return Math.floor(calculateLcpAverage(lcpData));
};

function calculateLcpScore(lcp: number): number {
    if (msToSeconds(lcp) <= 2) {
        return 100; // Excellent
    }if (msToSeconds(lcp) <= 4) {
        return Math.round(100 - ((lcp - 2) / (4 - 2)) * 50); // Good to Excellent
    }if (msToSeconds(lcp) <= 6) {
        return Math.round(50 - ((lcp - 4) / (6 - 4)) * 50); // Fair to Good
    }
        return Math.round(0 - ((lcp - 6) / (10 - 6)) * 50); // Poor to Fair
}

function calculateInpAverage(inpValues: number[]): number {

    const sum = inpValues.reduce((acc, curr) => acc + curr, 0);
    const average = sum / inpValues.length;
    
    // Round average to two decimal places
    return Math.round(average * 100) / 100;
}

function inpDataAverage(webVitalData: WebVitalsResponseItem[]): number {
    const inpData: number[] = [];
    if (webVitalData) {
        for (const item of webVitalData) {
            if (item.name === "INP") {
                inpData.push(item.value);
            }
        }
    }
    return Math.floor(calculateInpAverage(inpData));
}

function calculateInpScore(inp: number): number {
    if (inp <= 50) {
        return 100; // Excellent
    }if (inp <= 100) {
        return Math.round(100 - ((inp - 50) / (100 - 50)) * 50); // Good to Excellent
    }if (inp <= 200) {
        return Math.round(50 - ((inp - 100) / (200 - 100)) * 50); // Fair to Good
    }
    return Math.round(0 - ((inp - 200) / (300 - 200)) * 50); // Poor to Fair
}

const inpColor = (inpData: number) => {
    if (inpData <= 100) {
        return "green";
    } 
    if (inpData > 100 && inpData <= 200) {
        return "yellow";
    } 
    return "red";
};

const inpTrackColor = (inpData: number) => {
    if (inpData <= 100) {
        return "yellow";
    } 
    if (inpData > 100) {
        return "red";
    } 
    return "red";
};

const lcpColor = (lcpData: number) => {
    if (msToSeconds(lcpData) <= 2.5) {
        return "green";
    } 
    if (msToSeconds(lcpData) > 2.5 && lcpData <= 4) {
        return "yellow";
    } 
    return "red";
};

const lcpTrackColor = (lcpData: number) => {
    if (msToSeconds(lcpData) <= 2.5) {
        return "yellow";
    } 
    if (msToSeconds(lcpData) > 2.5) {
        return "red";
    } 
    return "red";
};

const clsColor = (clsData: number) => {
    if (clsData <= 0.25) {
        return "green";
    }
    if (clsData > 0.25 && clsData <= 0.5) {
        return "yellow";
    }
    return "red";
}

const clsTrackColor = (clsData: number) => {
    if (clsData <= 0.25) {
        return "yellow";
    }
    if (clsData > 0.25) {
        return "red";
    }
    return "red";
}

---
<div class="w-full grid max-sm:grid-cols-1 max-lg:grid-cols-2 lg:grid-cols-3 gap-4">
    <Card>
        <div slot="header" class="flex flex-row items-center gap-2">
            <Icon slot="icon" name="speedometer" class:list={"lcp-icon"} />
            <div class="text-xl font-bold">Largest Contentful Paint</div>
        </div>
        <div class="pt-2">
            <ProgressBar 
                value={calculateLcpScore(lcpDataAverage(lcpData))} 
                label="LCP Data" 
                class:list={"progressbar-lcp"}>
                    {lcpDataAverage(lcpData)}ms
            </ProgressBar>
        </div>
    </Card>
    <Card>
        <div slot="header" class="flex flex-row items-center gap-2">
            <Icon slot="icon" name="layout-wtf" class:list={"cls-icon"} />
            <div class="text-xl font-bold">Cumulative Layout Shift</div>
        </div>
        <div class="pt-2">
            <ProgressBar 
                value={calculateClsScore(clsDataAverage(clsData))} 
                label="CLS Data" 
                class:list={"progressbar-cls"}>
                    {clsDataAverage(clsData)}
            </ProgressBar>
        </div>
    </Card>
    <Card>
        <div slot="header" class="flex flex-row items-center gap-2">
            <Icon slot="icon" name="cursor" class:list={"inp-icon"} />
            <div class="text-xl font-bold">Interaction to Next Paint</div>
        </div>
        <div class="pt-2">
            <ProgressBar 
                value={calculateInpScore(inpDataAverage(inpData))} 
                label="CLS Data" 
                class:list={"progressbar-inp"}>
                    {inpDataAverage(inpData)}ms
            </ProgressBar>
        </div>
    </Card>
</div>

<style scoped define:vars={{ 
    lcptrack: lcpTrackColor(lcpDataAverage(lcpData)), 
    lcpcolor: lcpColor(lcpDataAverage(lcpData)),
    clstrack: clsTrackColor(clsDataAverage(clsData)),
    clscolor: clsColor(clsDataAverage(clsData)),
    inpcolor: inpColor(inpDataAverage(inpData)),
    inptrack: inpTrackColor(inpDataAverage(inpData))
    }}>

    .inp-icon {
        color: var(--inpcolor);
        font-size: 2rem;
    }

    .progressbar-inp {
        --track-color: var(--inptrack);
        --indicator-color: var(--inpcolor);
        --height: 1.5rem;
    }

    .progressbar-inp::part(label) { 
        font-weight: bolder; 
        font-size: 1rem; 
    }

    .cls-icon {
        color: var(--clscolor);
        font-size: 2rem;
    }

    .progressbar-cls {
        --track-color: var(--clstrack);
        --indicator-color: var(--clscolor);
        --height: 1.5rem;
    }

    .progressbar-cls::part(label) { 
        font-weight: bolder; 
        font-size: 1rem; 
    }

    .lcp-icon {
        color: var(--lcpcolor);
        font-size: 2rem;
    }

    .progressbar-lcp {
        --track-color: var(--lcptrack);
        --indicator-color: var(--lcpcolor);
        --height: 1.5rem;
    }

    .progressbar-lcp::part(label) { 
        font-weight: bolder; 
        font-size: 1rem; 
    }
</style>