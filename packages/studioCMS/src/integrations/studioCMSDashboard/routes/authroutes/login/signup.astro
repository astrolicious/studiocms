---
import { Layout } from 'studiocms-dashboard:components';
import Config from 'virtual:studiocms/config';
import type { Locals } from 'studiocms:helpers';
import OauthProviders from '../components/OauthProviders.astro';
import { StudioCMSRoutes } from 'studiocms-dashboard:routeMap';

const {  dashboardConfig } = Config;
const { authLinks: { loginURL, registerAPI }, mainLinks: { dashboardIndex } } = StudioCMSRoutes;

const locals = Astro.locals as Locals;

if (locals.isLoggedIn) {
	return Astro.redirect(dashboardIndex);
}
---

<Layout title='Registration Page' description="Registration Page" sideBarActiveItemID='login' includeSidebar={false}>
  <div class="pb-12 mt-5">

      <center><div class="text-5xl font-bold">Registration Page</div>
      <div class="py-2">
          <text class="text-lg">
            Create an account or sign in to continue.
          </text>
      </div>
    </center><br />

      <!-- oAUTH Providers -->
      <OauthProviders dashboardConfig={dashboardConfig} />
      <!-- End of oAUTH Providers -->

      <!-- Username and Password Provider-->
        <div class="py-8">
          <div class="bg-base-300 p-8 rounded-lg">

          <form method="post" action={registerAPI}>

            <sl-input 
            name="username" 
            id="username">
              <div class="text-xl font-bold" slot="label">Username</div>
            </sl-input><br />

            <sl-input 
            name="email" 
            id="email">
              <div class="text-xl font-bold" slot="label">Email address</div>
            </sl-input><br />

            <sl-input 
            name="displayname" 
            id="displayname">
              <div class="text-xl font-bold" slot="label">Display Name</div>
            </sl-input><br />

            <sl-input 
            type="password" 
            name="password"
            id="password"
            password-toggle>
              <div class="text-xl font-bold" slot="label">Password</div>
            </sl-input><br />

            <center>
              <sl-button variant="success" type="submit" outline>Continue <div slot="suffix" class="i-mdi:login"></div></sl-button>
            </center>

          </form>

          <div class="py-4">
            <center>
              <a href={loginURL} class="text-lg">Already have an account? Sign in!</a>
            </center>
          </div>

          </div>
        </div> 
      <!-- End of Username and Password Provider-->

      <sl-alert id="form-error" variant="danger" duration="4000" closable>
        <sl-icon slot="icon" name="exclamation-octagon"></sl-icon>
        <strong>Something went wrong!</strong><br />
        <div id = "form-error-message"></div>
      </sl-alert>
      <sl-alert id="form-success" variant="success" duration="4000" closable>
        <sl-icon slot="icon" name="check2-circle"></sl-icon>
        <strong>Success!</strong><br />
        <div id = "form-success-message"></div>
      </sl-alert>


  </div>
</Layout>

<script>
	const alertElement = document.getElementById("form-error")!;
  const errorMessageElement = document.getElementById("form-error-message")!;
	const successAlertElement = document.getElementById("form-success")!;
  const successMessageElement = document.getElementById("form-success-message")!;

	document.forms[0]?.addEventListener("submit", async (e) => {
		e.preventDefault();
		errorMessageElement.innerText = "";
		const formElement = e.target as HTMLFormElement;
		const response = await fetch(formElement.action, {
			method: formElement.method,
			body: new FormData(formElement)
		});
		if (response.ok) {
      successMessageElement.innerText = "Account Creation Successful! Redirecting...";
      //@ts-expect-error - toast is not a standard method on HTMLElement it comes from `Shoelace.syle`
      successAlertElement.toast();
      setTimeout(() => {
        window.location.reload();
      }, 1000)
		} else {
			errorMessageElement.innerText = (await response.json()).error;
      //@ts-expect-error - toast is not a standard method on HTMLElement it comes from `Shoelace.syle`
      alertElement.toast();
		}
	});
</script>