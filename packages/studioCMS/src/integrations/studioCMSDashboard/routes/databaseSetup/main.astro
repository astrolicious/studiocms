---
import { Alert, Button, Card, Details, Divider, Icon, Input, Switch } from 'astrolace:components';
import { Layout } from 'studiocms-dashboard:components';

---

<Layout title='Welcome | StudioCMS' description="Welcome to StudioCMS" sideBarActiveItemID='start' includeSidebar={false}>
  <div class="container justify-center items-center px-12 w-[100vw]">

      <div class="text-5xl font-bold pb-4">Welcome to StudioCMS</div>
      <div class="flex flex-col py-2 w-full gap-4">
        <Card>
          <text class="font-bold">What is StudioCMS?</text> 
          <Divider class="divider" />
          StudioCMS is a simple, easy to use, and fast CMS for Astro. It's built with the latest technologies and is designed to be as simple as possible. It's also open source and free to use. 
        </Card>
        <Card>
          <text class="font-bold">How do I use it?</text> 
          <Divider class="divider" />
          To use StudioCMS, you need to have a basic understanding of Astro and how it works. As well as StudioCMS. You can use the CMS to create, edit, and delete posts. You can also use it to manage your site's settings and more.
        </Card>
        <Card>
          <text class="font-bold">What's next?</text> 
          <Divider class="divider" />
          The next step is to start by filling in your site details below!
        </Card>
        <Card>
          <text class="font-bold">Problems? or Need Help?</text> 
          <Divider class="divider" />
          If you have any problems or need help, you can visit the <a href="https://github.com/astrolicious/studiocms" target="_blank" class="text-blue-500">GitHub Repository</a> or join the <a href="https://chat.astrolicious.dev" target="_blank" class="text-blue-500">Discord Server</a> for help.
        </Card>
      </div>
      
      <br />

      <!-- Username and Password Provider-->
        <div class="py-8">
          <div class="bg-base-300 p-8 rounded-lg">

          <form method="post" action="/api/setup">

            <Input 
              name="title" 
              id="title"
              label='Site Title'  
              /><br />

            <Input 
              name="description" 
              id="description" 
              label='Site Description'
              /><br />

            <Input 
              name="og-image" 
              id="og-image"
              label="OG Image URL" 
              placeholder="Coming Soon" 
              disabled 
              /><br />

              <Switch 
                name="local-setup"
                id="local-setup" 
                value="1"
                size="medium"
                help-text="Would you like to setup a local Admin User or OAuth User?"
                >
                <div class="textlabelinput">
                  <Icon name="person-exclamation" />
                  Setup Local Admin User?
                </div>
              </Switch>
            
            <Details id="local-admin">
              <div class="textlabelinput" slot="summary">
                <Icon name="person-add" /> 
                Local Admin Setup
              </div>

              <Input 
                name="local-admin-name"
                id="local-admin-name"
                label="Username for Primary Admin ( Just set one, You can add more later )" 
                /><br />

              <Input 
                name="local-admin-display-name"
                id="local-admin-display-name" 
                label="Display name for Primary Admin" 
                /><br />

              <Input 
                type="password" 
                name="local-admin-password"
                id="local-admin-password"
                label="Password"
                password-toggle 
                />
            </Details>

            <Details id="oauth-admin" open>
              <div class="textlabelinput" slot="summary"><sl-icon name="person-rolodex"></sl-icon> oAuth Admin Setup</div>
              <Input 
                name="oauth-admin-name"
                id="oauth-admin-name"
                placeholder="Username of Primary Admin (ex. GithubUsername)" 
                label='Username of Primary Admin (ex. GithubUsername)'
                helpText='( Just set one, You can add more later )'
                />
            </Details><br />


            <div style="text-align:center">
              <Button variant="success" type="submit" outline>Initialize Database<Icon slot="suffix" library='mdi' name="login" /></Button>
            </div>

          </form>

          </div>
        </div> 

      <Alert id="form-error" variant="danger" duration={4000} closable>
        <Icon slot="icon" name="exclamation-octagon"/>
        <strong>Something went wrong!</strong><br />
        <div id = "form-error-message"></div>
      </Alert>
      <Alert id="form-success" variant="success" duration={4000} closable>
        <Icon slot="icon" name="check2-circle"/>
        <strong>Success!</strong><br />
        <div id="form-success-message"></div>
      </Alert>


  </div>
</Layout>

<script>
import type { SlAlert, SlDetails, SlSwitch } from "astrolace:types";

	const alertElement = document.getElementById("form-error") as SlAlert;
  const errorMessageElement = document.getElementById("form-error-message")!;
	const successAlertElement = document.getElementById("form-success") as SlAlert;
  const successMessageElement = document.getElementById("form-success-message")!;
  const localSetupSwitch = document.getElementById('local-setup') as SlSwitch;
  const localAdmin = document.getElementById('local-admin') as SlDetails;
  const oauthAdmin = document.getElementById('oauth-admin') as SlDetails;

  // Update the disabled state of the local-admin and oauth-admin details based on the checkbox state
  localSetupSwitch.addEventListener('sl-change', () => {
    if (localSetupSwitch.checked) {
      localAdmin.show();
      oauthAdmin.hide();
    } else {
      localAdmin.hide();
      oauthAdmin.show();
    }
  })

	document.forms[0]?.addEventListener("submit", async (e) => {
		e.preventDefault();
		errorMessageElement.innerText = "";
		const formElement = e.target as HTMLFormElement;
		const response = await fetch(formElement.action, {
			method: formElement.method,
			body: new FormData(formElement)
		});
		if (response.ok) {
      successMessageElement.innerText = "Successfully Seeded Database! Redirecting...";
      successAlertElement.toast();
      setTimeout(() => {
        window.location.href = "/done";
      }, 1000)
		} else {
			errorMessageElement.innerText = (await response.json()).error;
      alertElement.toast();
		}
	});
</script>

<style>
  .textlabelinput {
    @apply: text-xl font-bold flex items-center gap-2 pb-2;
  }
</style>