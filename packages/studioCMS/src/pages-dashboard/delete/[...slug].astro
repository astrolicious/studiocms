---
// @ts-expect-error - Some types can only be imported from the Astro runtime
import { Blog, db, eq } from 'astro:db';
import Dashboard from '../../layouts/Dashboard.astro';
import type { Locals } from '../../schemas/locals';
import Config from 'virtual:studiocms/config';
import authHelper from '../../utils/authhelper';

if (Config.includedIntegrations.useInoxSitemap) {
    import('sitemap-ext:config').then((sitemap) => {
        sitemap.default(false)
    })
}

function redirectToPath(path: string) {
	return Astro.redirect(import.meta.env.BASE_URL + path);
}

const { slug } = Astro.params;
const postArrayed = await db.select().from(Blog).where(eq(Blog.slug, slug));
const post = postArrayed[0];

if (!slug || !post) {
	return redirectToPath('dashboard/');
}

const locals = Astro.locals as Locals;
const { permissionLevel, name } = await authHelper(locals);

// If the user is not logged in, redirect to the login page
if ( permissionLevel === "unknown" ) {
    console.log('User is not logged in. Redirecting to login page.');
    return redirectToPath('dashboard/login');
}
if ( permissionLevel !== 'admin' && permissionLevel !== 'editor' ) {
    console.log('User is not an admin or editor. Redirecting to profile page.');
    return redirectToPath('dashboard/profile');
}

if (Astro.request.method === 'POST') {
	const formData = await new Request(Astro.request.url, {
		method: Astro.request.method,
		headers: Astro.request.headers,
		body: Buffer.from(await Astro.request.arrayBuffer()),
	}).formData();

	const title = formData.get('title');

	if (title === post.slug) {
		await db
			.delete(Blog)
			.where(eq(Blog.slug, post.slug))
			.then(() => {
				return new Response('Post deleted', { status: 200 });
			})
			.catch(() => {
				return new Response('Error deleting post', { status: 500 });
			});

        return redirectToPath('dashboard/');
	}
}
---

<Dashboard title='Delete Post'>
    <center>
        <h4> Post Title: {post.title} - Slug: {post.slug} </h4>
    </center>
    <div>
        <p class="font-small">
        Currently logged in as: <bold>{name}</bold> 
        </p>

        <form method="post" enctype="multipart/form-data" >
                
            <label for="title">Type the post slug to confirm</label><br>
            <input 
                type="text" 
                id="title" 
                name="title" 
                placeholder="Your Post Slug (THIS WILL DELETE THE POST)"
                required><br><br>

            <button class="red-btn" type="submit">DELETE!</button>

        </form>

                
    </div>
</Dashboard>

<style>
    .dash {
        padding: 2rem;
        border: 2px solid #ccc;
        border-radius: 5rem;
        background-color: #fff;
        margin: 2rem;
        
    }
    bold {
        font-weight: bold;
    }
    .font-small {
        font-size: 1rem;
    }
    .dash-header {
        display: flex;
        justify-content: space-between;
    }
    .right {
        display: flex;
        justify-content: flex-end;
        padding-right: 4rem;
    }
    .left {
        display: flex;
        justify-content: flex-start;
        padding-left: 4rem;
    }
    button {
        padding: 1rem;
        background-color: rgb(202, 0, 0);
        font-weight: bold;
        color: #fff;
        border: none;
        border-radius: 99rem;
        cursor: pointer;
    }
    .btn {
        padding: 1rem;
        background-color: rgb(0, 37, 202);
        font-weight: bold;
        color: #fff;
        border: none;
        border-radius: 99rem;
        cursor: pointer;
    }
    .grn-btn {
        padding: 1rem;
        background-color: rgb(0, 241, 0);
        font-weight: bold;
        color: #000000;
        border: none;
        border-radius: 99rem;
        cursor: pointer;
    }
    .red-btn {
        padding: 1rem;
        background-color: rgb(160, 0, 0);
        font-weight: bold;
        color: #000000;
        border: none;
        border-radius: 99rem;
        cursor: pointer;
    }
    input {
        background-color: #f4f4f4;
        border-radius: 10px;
        padding: 0.25rem;
        border: rgb(124, 124, 124) 1px solid;
        width: 35vmax;
    }
    textarea {
        background-color: #f4f4f4;
        border-radius: 10px;
        padding: 0.25rem;
        border: rgb(124, 124, 124) 1px solid;
        width: 100%;
    }
    label {
        font-size: large;
        font-weight: bold;
    }
    .info-text {
        font-size: small;
        display: inline;
        font-style: italic;
    }
    #editor {
        display: flex;
        position: relative;
        width: max-content;
    }
    #content,
    #html-preview {
        padding: 20px;
        width: 35vw;
        height: 400px;
        overflow-y: auto;
    }

    #content {
        background: #98a2ba;
        border: none;
        border-radius: 8px 0 0 8px;
        color: #000000;
        outline: none;
        resize: none;
    }

    #html-preview {
        background: #bbc8e1;
        border-radius: 0 8px 8px 0;
        color: #1f1f1f;
    }
    pre {
        display: inline;
        background-color: #f0f0f0;
        padding: 0rem;
        font-size: 1rem;

    }
</style>