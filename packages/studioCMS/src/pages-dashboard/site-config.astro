---
// @ts-expect-error - Some types can only be imported from the Astro runtime
import { db, eq } from 'astro:db';
import { SiteConfig as SiteConfigTable } from '../db/tables';
import { asDrizzleTable } from '@astrojs/db/utils';
import { authHelper, type Locals } from 'studiocms:helpers';
import Dashboard from '../layouts/Dashboard.astro';
import Config from 'virtual:studiocms/config';

if (Config.includedIntegrations.useInoxSitemap) {
    import('sitemap-ext:config').then((sitemap) => {
        sitemap.default(false)
    })
}

const siteConfigSafe = asDrizzleTable("SiteConfig", SiteConfigTable);
const ConfigArray = await db.select().from(siteConfigSafe);
const contextConfig = ConfigArray[0];
const locals = Astro.locals as Locals;

const { permissionLevel } = await authHelper(locals);

function redirectToPath(path: string) {
	return Astro.redirect(import.meta.env.BASE_URL + path);
}

// If the user is not logged in, redirect to the login page
if ( permissionLevel === "unknown" ) {
    console.log('User is not logged in. Redirecting to login page.');
    return redirectToPath('dashboard/login');
}
if ( permissionLevel !== 'admin') {
    console.log('User is not an admin. Redirecting to profile page.');
    return redirectToPath('dashboard/profile');
}

if (Astro.request.method === 'POST') {
	const formData = await new Request(Astro.request.url, {
		method: Astro.request.method,
		headers: Astro.request.headers,
		body: Buffer.from(await Astro.request.arrayBuffer()),
	}).formData();

	const title = formData.get('title');
	const description = formData.get('description');

	await db
		.update(siteConfigSafe)
		.set({
			title: title as string,
			description: description as string,
		})
		.where(eq(siteConfigSafe.id, '1'))
		.then(() => {
			return new Response('Success', { status: 200 });
		})
		.catch(() => {
			return new Response('Error', { status: 500 });
		});

    return redirectToPath('dashboard');
}
---

<Dashboard title='Site Configuration'>
    <div>
        <form method="post" enctype="multipart/form-data" >
            <label for="title">Site Title</label><br>
            <input 
                type="text" 
                id="title" 
                name="title" 
                value={contextConfig.title} 
                required><br>
            <label for="description">Description</label><br>
            <input
                type="text" 
                id="description" 
                name="description" 
                value={contextConfig.description}
                required><br>

            <center>
                <button class="btn" type="submit">Update!</button>
            </center>

        </form>
    </div>
</Dashboard>

<style>
    .dash {
        padding: 2rem;
        border: 2px solid #ccc;
        border-radius: 5rem;
        background-color: #fff;
        margin: 2rem;
        
    }
    bold {
        font-weight: bold;
    }
    .font-small {
        font-size: 1rem;
    }
    .dash-header {
        display: flex;
        justify-content: space-between;
    }
    .right {
        display: flex;
        justify-content: flex-end;
        padding-right: 4rem;
    }
    .left {
        display: flex;
        justify-content: flex-start;
        padding-left: 4rem;
    }
    button {
        padding: 1rem;
        background-color: rgb(202, 0, 0);
        font-weight: bold;
        color: #fff;
        border: none;
        border-radius: 99rem;
        cursor: pointer;
    }
    .btn {
        padding: 1rem;
        background-color: rgb(0, 37, 202);
        font-weight: bold;
        color: #fff;
        border: none;
        border-radius: 99rem;
        cursor: pointer;
    }
    input {
        background-color: #f4f4f4;
        border-radius: 10px;
        padding: 0.25rem;
        border: rgb(124, 124, 124) 1px solid;
        width: 35vmax;
    }
    textarea {
        background-color: #f4f4f4;
        border-radius: 10px;
        padding: 0.25rem;
        border: rgb(124, 124, 124) 1px solid;
        width: 100%;
    }
    label {
        font-size: large;
        font-weight: bold;
    }
    .info-text {
        font-size: small;
        display: inline;
        font-style: italic;
    }
    info {
        font-size: small;
        display: inline;
        font-style: italic;
    }

</style>