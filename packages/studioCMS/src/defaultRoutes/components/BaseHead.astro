---
import type { z } from 'astro/zod';
import Config from 'virtual:studiocms/config';
import version from 'virtual:studiocms/version';
import type { HeadConfigSchema } from '../../schemas/defaultFrontend';
import { createHead } from '../../utils/head';
import { fileWithBase } from '../../utils/base';
import { extname } from 'node:path';

// // Import the global.css file here so that it is included on
// // all pages through the use of the <BaseHead /> component.
import './global.css';

const { defaultFrontEndConfig: { htmlDefaultHead, favicon } } = Config;

interface Props {
	title: string;
	description: string;
	lang?: string | undefined;
	image?: string | undefined;
}

const canonical = Astro.site ? new URL(Astro.url.pathname, Astro.site) : undefined;

const faviconTypeMap = {
	'.ico': 'image/x-icon',
	'.gif': 'image/gif',
	'.jpeg': 'image/jpeg',
	'.jpg': 'image/jpeg',
	'.png': 'image/png',
	'.svg': 'image/svg+xml',
};

function isFaviconExt(ext: string): ext is keyof typeof faviconTypeMap {
	return ext in faviconTypeMap;
}

const getFavicon = () => {
	const ext = extname(favicon).toLowerCase();

	if (!isFaviconExt(ext)) {
		throw new Error(`Unsupported favicon type: ${ext}`);
	}

	const type = faviconTypeMap[ext];
	return { href: fileWithBase(favicon), type };
}

const {
	title,
	description,
	lang,
	image = 'https://images.unsplash.com/photo-1707343843982-f8275f3994c5?q=80&w=1032&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDF8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D',
} = Astro.props;

const headDefaults: z.input<ReturnType<typeof HeadConfigSchema>> = [
	{ tag: 'meta', attrs: { charset: 'utf-8' } },
	{
		tag: 'meta',
		attrs: { name: 'viewport', content: 'width=device-width, initial-scale=1' },
	},
	{ tag: 'title', content: `${title}` },
	{ tag: 'meta', attrs: { name: 'title', content: title} },
	{ tag: 'meta', attrs: { name: 'description', content: description } },
	{ tag: 'link', attrs: { rel: 'canonical', href: canonical?.href } },
	{ tag: 'meta', attrs: { name: 'generator', content: Astro.generator } },
	{
		tag: 'meta',
		attrs: { name: 'generator', content: `StudioCMS v${version}` },
	},
	// Favicon
	{
		tag: 'link',
		attrs: {
			rel: 'shortcut icon',
			href: getFavicon().href,
			type: getFavicon().type,
		},
	},
	// OpenGraph Tags
	{ tag: 'meta', attrs: { property: 'og:title', content: title } },
	{ tag: 'meta', attrs: { property: 'og:type', content: 'website' } },
	{ tag: 'meta', attrs: { property: 'og:url', content: canonical?.href } },
	{ tag: 'meta', attrs: { property: 'og:locale', content: lang } },
	{ tag: 'meta', attrs: { property: 'og:description', content: description } },
	{ tag: 'meta', attrs: { property: 'og:site_name', content: title } },
	{ tag: 'meta', attrs: { property: 'og:image', content: image } },
	// Twitter Tags
	{
		tag: 'meta',
		attrs: { name: 'twitter:card', content: 'summary_large_image' },
	},
	{ tag: 'meta', attrs: { name: 'twitter:url', content: canonical?.href } },
	{ tag: 'meta', attrs: { name: 'twitter:image', content: image } },
	{ tag: 'meta', attrs: { name: 'twitter:title', content: title } },
	{ tag: 'meta', attrs: { name: 'twitter:description', content: description } },
	// Fonts
	{ tag: 'link', attrs: { rel: 'preconnect', href: 'https://fonts.googleapis.com' } },
	{ tag: 'link', attrs: { rel: 'preconnect', href: 'https://fonts.gstatic.com', crossorigin: '' } },
	{
		tag: 'link',
		attrs: {
			href: 'https://fonts.googleapis.com/css2?family=Atkinson+Hyperlegible:wght@400;700&display=swap',
			rel: 'stylesheet',
		},
	},
];

// Link to sitemap, but only when `site` is set.
if (Astro.site) {
	headDefaults.push({
		tag: 'link',
		attrs: {
			rel: 'sitemap',
			href: fileWithBase('/sitemap-index.xml'),
		},
	});
}

const head = createHead(headDefaults, htmlDefaultHead);
---

{head.map(({ tag: Tag, attrs, content }) => <Tag {...attrs} set:html={content} />)}