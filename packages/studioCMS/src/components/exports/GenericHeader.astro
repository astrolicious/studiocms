---
import Config from 'virtual:studiocms/config';
import { extname } from "node:path";
import { fileWithBase } from "../../utils/base";
import { headDefaults } from "./headDefaults"
import { createHead } from "../../utils/head";

const { defaultFrontEndConfig: { htmlDefaultHead, favicon: cFav } } = Config;

interface Props {
    title: string;
    description: string;
    favicon: string;
    lang?: string;
    ogImage?: string;
    canonicalURL?: URL;
}

const canonical = Astro.site ? new URL(Astro.url.pathname, Astro.site) : undefined;

const { 
    title, 
    description, 
    favicon = cFav, 
    canonicalURL = canonical, 
    lang = "en", 
    ogImage 
} = Astro.props;

const faviconTypeMap = {
	'.ico': 'image/x-icon',
	'.gif': 'image/gif',
	'.jpeg': 'image/jpeg',
	'.jpg': 'image/jpeg',
	'.png': 'image/png',
	'.svg': 'image/svg+xml',
};

function isFaviconExt(ext: string): ext is keyof typeof faviconTypeMap {
	return ext in faviconTypeMap;
}

export const getFavicon = () => {
	const ext = extname(favicon).toLowerCase();

	if (!isFaviconExt(ext)) {
		throw new Error(`Unsupported favicon type: ${ext}`);
	}

	const type = faviconTypeMap[ext];
	return { href: fileWithBase(favicon), type };
}

const genericHead = headDefaults(title, description, lang, Astro, getFavicon(), ogImage, canonicalURL);

const head = createHead(genericHead, htmlDefaultHead)
---

{head.map(({ tag: Tag, attrs, content }) => <Tag {...attrs} set:html={content} />)}