---
import { Image } from 'astro:assets';
import Config from 'virtual:studiocms/config';
import { Cloudinary } from '@cloudinary/url-gen';
import { fill } from '@cloudinary/url-gen/actions/resize';
import type { Locals } from '../../schemas/locals';

interface Props {
	src: string;
	alt: string;
	width: number;
	height: number;
}

const { src, ...props } = Astro.props;
const {
	imageService: { cdnPlugin },
} = Config;

const { runtime } = Astro.locals as Locals;

// Get the current configured image service
async function getImageSrc() {
	// Cloudinary Image Service (JavaScript SDK) - https://cloudinary.com/documentation/javascript_integration#landingpage
	if (cdnPlugin === 'cloudinary-js') {
		//// Initialize Cloudinary
		const cld = new Cloudinary({
			cloud: {
				cloudName:
					import.meta.env.CMS_CLOUDINARY_CLOUDNAME ||
					process.env.CMS_CLOUDINARY_CLOUDNAME ||
					runtime.env.CMS_CLOUDINARY_CLOUDNAME ||
					'demo',
			},
		});
		//// Configure the image
		const cldSrc = cld
			.image(src)
			.format('auto')
			.quality('auto')
			.resize(fill('auto').width(props.width).height(props.height));

		// Set the delivery type to 'fetch' if the image source is an external URL
		if (src.startsWith('https://')) {
			cldSrc.setDeliveryType('fetch');
		}
		return cldSrc.toURL();
	}

	// Return the original image source if no External image service plugin is configured
	return src;
}

// check if the image source is an external URL
function inferSizeNeeded(url: string) {
	if (url.startsWith('https://') || url.startsWith('http://')) {
		return true;
	}
	return false;
}

// Get the current configured image service source URL
const currentSrcURL = await getImageSrc();

// Set the image properties
const imageProps = {
	src: await getImageSrc(),
	inferSize: inferSizeNeeded(currentSrcURL),
	...props,
};
---
<Image loading={"lazy"} {...imageProps}/>