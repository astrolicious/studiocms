---
// @ts-expect-error - This is a missing type definition for the `astro:db` import since its a virtual module during Astro Runtime
import { Blog, asc, db, eq } from 'astro:db';
import FormattedDate from '../../components/FormattedDate.astro';
import Dashboard from '../../layouts/Dashboard.astro';
import { rankCheck } from '../../utils/rankcheck';
import type { Locals } from './locals';
import sitemap from 'sitemap-ext:config';
sitemap(false); // opt-out


function redirectToPath(path: string) {
	return Astro.redirect(import.meta.env.BASE_URL + path);
}
const locals = Astro.locals as Locals;
const currentUserRank = await rankCheck(locals);
const getUserName = locals.dbUser.name ? locals.dbUser.name : locals.user.username;

// If the user is not logged in, redirect to the login page
if ( currentUserRank === "unknown" ) {
    console.log('User is not logged in. Redirecting to login page.');
    return redirectToPath('dashboard/login');
}
if ( currentUserRank !== 'admin' && currentUserRank !== 'editor' ) {
    console.log('User is not an admin or editor. Redirecting to profile page.');
    return redirectToPath('dashboard/profile');
}

const posts = await db.select().from(Blog).orderBy(asc(Blog.publishedAt));
---

<Dashboard title='Current Posts'>
    <div>
        <p class="font-small">
        Currently logged in user: <bold>{getUserName}</bold> | <a href={"/dashboard/profile"}>More info...</a>
        </p>

        { posts && posts.map((post: Blog.$inferSelect) => (
            <div>
                <p>
                    <bold>{post.title}</bold> - <FormattedDate date={post.publishedAt} />
                    <a href={`${import.meta.env.BASE_URL}dashboard/edit/${post.slug}`} class="btn-edit">Edit</a>
                    { currentUserRank === 'admin' && <a href={`/dashboard/delete/${post.slug}`} class="btn-delete">Delete</a> }
                </p>
            </div>
        )) }
    </div>
</Dashboard>

<style>
    .dash {
        padding: 2rem;
        border: 2px solid #ccc;
        border-radius: 5rem;
        background-color: #fff;
        margin: 2rem;
        
    }
    bold {
        font-weight: bold;
    }
    .font-small {
        font-size: 1rem;
    }
    form {
        display: flex;
        justify-content: flex-end;
        padding-right: 4rem;
    }
    button {
        padding: 1rem;
        background-color: rgb(202, 0, 0);
        font-weight: bold;
        color: #fff;
        border: none;
        border-radius: 99rem;
        cursor: pointer;
    }
    .btn {
        padding: 1rem;
        background-color: rgb(0, 37, 202);
        font-weight: bold;
        color: #fff;
        border: none;
        border-radius: 99rem;
        cursor: pointer;
    }
    .btn-edit {
        padding: 1rem;
        background-color: rgb(169, 0, 211);
        font-weight: bold;
        color: #fff;
        border: none;
        border-radius: 99rem;
        cursor: pointer;
    }
    .btn-delete {
        padding: 1rem;
        background-color: rgb(142, 0, 0);
        font-weight: bold;
        color: #fff;
        border: none;
        border-radius: 99rem;
        cursor: pointer;
    }
</style>