---
// @ts-expect-error - This is a missing type definition for the `astro:db` import since its a virtual module during Astro Runtime
import { Blog, db, eq } from 'astro:db';
import Dashboard from '../../layouts/Dashboard.astro';
import { rankCheck } from '../../utils/rankcheck';
import type { Locals } from './locals';
import sitemap from 'sitemap-ext:config';
sitemap(false); // opt-out

function redirectToPath(path: string) {
	return Astro.redirect(import.meta.env.BASE_URL + path);
}

const locals = Astro.locals as Locals;

const currentUserRank = await rankCheck(locals);

// If the user is not logged in, redirect to the login page
if ( currentUserRank === "unknown" ) {
    console.log('User is not logged in. Redirecting to login page.');
    return redirectToPath('dashboard/login');
}
if ( currentUserRank !== 'admin' && currentUserRank !== 'editor' ) {
    console.log('User is not an admin or editor. Redirecting to profile page.');
    return redirectToPath('dashboard/profile');
}

const getUserName = locals.dbUser.name ? locals.dbUser.name : locals.user.username;

if (Astro.request.method === 'POST') {
	const formData = await new Request(Astro.request.url, {
		method: Astro.request.method,
		headers: Astro.request.headers,
		body: Buffer.from(await Astro.request.arrayBuffer()),
	}).formData();

	const title = formData.get('title');
	const slug = formData.get('slug');
	const description = formData.get('description');
	const heroImage = formData.get('hero-image');
	const content = formData.get('content');

	const postArrayed = await db
		.select()
		.from(Blog)
		.where(eq(Blog.slug, slug as string));
	const existingPost = postArrayed[0];

	function makeResponse(message: string, status: number) {
		return new Response(message, { status: status });
	}

	if (existingPost) {
		return makeResponse('Post with that slug already exists', 400);
	}

	await db
		.insert(Blog)
		.values({
			title: title as string,
			slug: slug as string,
			description: description as string,
			heroImage: heroImage as string,
			content: content as string,
		})
		.then(() => {
			return new Response('Post created', { status: 200 });
		})
		.catch(() => {
			return new Response('Error creating post', { status: 500 });
		});

    return redirectToPath('dashboard');
}
---

<Dashboard title='Create New Post'>
    <div>
        <p class="font-small">
        Currently logged in as: <bold>{getUserName}</bold> 
        </p>

        <form method="post" enctype="multipart/form-data" >
                
            <label for="title">Post Title</label><br>
            <input 
                type="text" 
                id="title" 
                name="title" 
                placeholder="Your Post Title" 
                required><br>
            <label for="slug">Slug</label><br>
            <input 
                type="text" 
                id="slug" 
                name="slug" 
                placeholder="your-post-slug"
                required><br>
            <label for="description">Description</label><br>
            <input
                type="text" 
                id="description" 
                name="description" 
                placeholder="Your post's basic description"
                required><br>
            <label for="hero-image">Hero Image</label><br>
            <p class="info-text">To use images stored in your public/ folder use the following example: <pre>/my-image.png</pre></p><br>
            <input 
                type="text" 
                id="hero-image" 
                name="hero-image" 
                placeholder="Your post's hero image URL"
                value="https://images.unsplash.com/photo-1707345512638-997d31a10eaa?q=80&w=1170&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDF8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D"
                required><br>
            <label for="content">Content</label><br>
            <div id="editor">
                <textarea 
                    id="content" 
                    name="content" 
                    data-provide="markdown" 
                    rows="10" 
                    placeholder="Your post's content in markdown format."
                    required></textarea>
                <div id="html-preview"></div>
            </div><br><br>

            <button class="btn" type="submit">Create!</button>

        </form>

                
    </div>
</Dashboard>

<script>
    import { markdown } from "../../utils/marked";
    import Config from 'virtual:astro-studio-cms:config';
    import { renderMarkDoc } from '../../utils/markdoc';
    
            document.getElementById('content').addEventListener('input', async function () {
                const markdownContent = document.getElementById('content');
                const htmlPreview = document.getElementById('html-preview');
    
                if (Config.contentRenderer === 'marked' ) {
                    const htmlContent = await markdown(markdownContent.value);
                    htmlPreview.innerHTML = htmlContent;
                } else if (Config.contentRenderer === 'markdoc') {
                    const htmlContent = await renderMarkDoc(markdownContent.value);
                    htmlPreview.innerHTML = htmlContent;
                }
            });
</script>

<style>
    .dash {
        padding: 2rem;
        border: 2px solid #ccc;
        border-radius: 5rem;
        background-color: #fff;
        margin: 2rem;
        
    }
    bold {
        font-weight: bold;
    }
    .font-small {
        font-size: 1rem;
    }
    .dash-header {
        display: flex;
        justify-content: space-between;
    }
    .right {
        display: flex;
        justify-content: flex-end;
        padding-right: 4rem;
    }
    .left {
        display: flex;
        justify-content: flex-start;
        padding-left: 4rem;
    }
    button {
        padding: 1rem;
        background-color: rgb(202, 0, 0);
        font-weight: bold;
        color: #fff;
        border: none;
        border-radius: 99rem;
        cursor: pointer;
    }
    .btn {
        padding: 1rem;
        background-color: rgb(0, 37, 202);
        font-weight: bold;
        color: #fff;
        border: none;
        border-radius: 99rem;
        cursor: pointer;
    }
    input {
        background-color: #f4f4f4;
        border-radius: 10px;
        padding: 0.25rem;
        border: rgb(124, 124, 124) 1px solid;
        width: 35vmax;
    }
    textarea {
        background-color: #f4f4f4;
        border-radius: 10px;
        padding: 0.25rem;
        border: rgb(124, 124, 124) 1px solid;
        width: 100%;
    }
    label {
        font-size: large;
        font-weight: bold;
    }
    .info-text {
        font-size: small;
        display: inline;
        font-style: italic;
    }
    #editor {
        display: flex;
        position: relative;
        width: max-content;
    }
    #content,
    #html-preview {
        padding: 20px;
        width: 35vw;
        height: 400px;
        overflow-y: auto;
    }

    #content {
        background: #98a2ba;
        border: none;
        border-radius: 8px 0 0 8px;
        color: #000000;
        outline: none;
        resize: none;
    }

    #html-preview {
        background: #bbc8e1;
        border-radius: 0 8px 8px 0;
        color: #1f1f1f;
    }
    pre {
        display: inline;
        background-color: #f0f0f0;
        padding: 0rem;
        font-size: 1rem;

    }

</style>