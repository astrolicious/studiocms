---
import { Alert, Button, Dialog, Divider, Icon, Input, Textarea } from 'astrolace:components';
import alertOctogramOutline from '@studiocms/assets/svgs/alert-octagram-outline.svg';
import check2Circle from '@studiocms/assets/svgs/check2-circle.svg';
import exclamationOctagon from '@studiocms/assets/svgs/exclamation-octagon.svg';
import { FEEDBACK_FORM, MAILSERVICE } from './betafeedbackvars';

const formAction = `${MAILSERVICE}/${FEEDBACK_FORM}`;
---
<Dialog id="beta-feedback-dialog" label="Beta Feedback Form">

    <div>
        Give feedback about the beta version of the StudioCMS Dashboard directly to the <a class="text-blue-500" href="https://github.com/astrolicious/studiocms/issues">Github Repository Issues</a>. Your feedback will help us improve StudioCMS.
    </div>

    <Divider />

    <form id="beta-feedback-form" method="POST" action={formAction}>

        <input type="checkbox" name="botcheck" id="botcheck" style="display: none;" form="beta-feedback-form" >

        <Input type="email" name="email" label="Github Email" placeholder="Github email used for automatic Github reference" form="beta-feedback-form" required />

        <Divider />

        <Input type="text" name="name" label="Display name" form="beta-feedback-form" placeholder="YourChosenDisplayName" required /> 

        <Divider />

        <Input type="text" name="subject" label="Issue Label" placeholder="New Issue" form="beta-feedback-form" required />

        <Divider />

        <Textarea id="form-message" name="message" form="beta-feedback-form" placeholder="Your Message here, Please make this message as detailed as possible for us to assist!">
            <span slot="label">Issue Message *</span>
        </Textarea>

        <Divider />

        <div style="text-align: center;">
            <Button type="submit" form="beta-feedback-form" variant="success" size="medium" class:list={"beta-feedback-submit"}>
                Submit
            </Button>
        </div>

    </form>

    <Button slot="footer" variant="danger" size="medium" class:list={"beta-feedback-cancel"}>Cancel</Button>
</Dialog>

<div>
    <Button variant="success" size="large" class="open-beta-feedback" outline>
        <Icon slot="prefix" src={alertOctogramOutline.src} />
        Beta Feedback
    </Button>
</div>

<div class="alerts">
    <Alert variant="danger" id="error-toast" duration={6000} closable>
        <Icon slot="icon" src={exclamationOctagon.src} />
        <p id="form-error-toast"></p>
    </Alert>
    
    <Alert variant="success" id="success-toast" duration={6000} closable>
        <Icon slot="icon" src={check2Circle.src} />
        <p id="form-success-toast"></p>
    </Alert>
</div>

<script is:inline>
    const betaFeedbackDialog = document.getElementById('beta-feedback-dialog');
    const betaFeedbackForm = document.getElementById('beta-feedback-form');
    const FormMessage = document.getElementById('form-message');
    const botCheck = document.getElementById('botcheck');
    const openFeedbackDialogButton = document.getElementsByClassName('open-beta-feedback')[0];
    const cancelFeedbackDialogButton = document.getElementsByClassName('beta-feedback-cancel')[0];
    const submitFeedbackButton = document.getElementsByClassName('beta-feedback-submit')[0];
    const alertsContainer = document.querySelector('.alerts');
    const errorToast = alertsContainer.querySelector('sl-alert[variant="danger"]');
    const errorToastMessage = errorToast.querySelector('#form-error-toast');
    const successToast = alertsContainer.querySelector('sl-alert[variant="success"]');
    const successToastMessage = successToast.querySelector('#form-success-toast');

    openFeedbackDialogButton.addEventListener('click', () => {
        betaFeedbackDialog.show();
    });

    cancelFeedbackDialogButton.addEventListener('click', () => {
        betaFeedbackDialog.hide();
    });

    betaFeedbackDialog.addEventListener('sl-request-close', event => {
        if (event.detail.source === 'overlay') {
            event.preventDefault();
        }
    });

    betaFeedbackForm.addEventListener('submit', async function(e) {
        e.preventDefault();

        if (FormMessage.value.length < 10) {
            errorToastMessage.innerText = 'Please provide a detailed message. Minimum 10 characters.';
            errorToast.toast();
            return;
        }

        if (botCheck.checked) {
            errorToastMessage.innerText = 'You are a bot!';
            errorToast.toast();
            return;
        }

        const formData = new FormData(betaFeedbackForm);

        submitFeedbackButton.disabled = true;
        submitFeedbackButton.loading = true;

        try {
            const response = await fetch(betaFeedbackForm.action, {
                method: "POST",
                body: formData,
            });

            const data = await response.json();

            if (response.ok) {
                successToastMessage.innerText = data.message || 'Feedback sent successfully!';
                successToast.toast();
                betaFeedbackForm.reset();
                betaFeedbackDialog.hide();
            } else {
                errorToastMessage.innerText = data.error || 'An error occurred while sending feedback. Please try again later.';
                errorToast.toast();
            }
        } catch (error) {
            errorToastMessage.innerText = error.message || 'An error occurred while sending feedback. Please try again later.';
            errorToast.toast();
        }
    });

</script>