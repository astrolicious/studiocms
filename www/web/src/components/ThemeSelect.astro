---
import { Icon } from 'astro-icon/components';
---

<div class="dropdown relative select-none w-8 h-8">
  <button id="themeselector" class="" aria-label="Select Theme">
    <Icon name={'sun'} class="h-8 w-8 text-black dark:hidden" />
    <Icon name={'moon'} class="hidden h-8 w-8 text-white dark:block" />
  </button>

  <div class="dropdown__window absolute right-8 top-16 z-10 hidden min-w-40 overflow-hidden rounded-md shadow-[0_3px_10px_rgb(0,0,0,0.2)] focus-visible:outline-none dark:shadow-[0_3px_10px_rgb(255,255,255,0.2)]" tabindex="0">
    <button class="flex w-full gap-4 whitespace-nowrap border-b border-slate-300 p-4 text-left bg-slate-200 dark:bg-slate-950 hover:bg-slate-200 focus:bg-slate-200 focus-visible:outline-none dark:border-slate-700 dark:hover:bg-slate-900 dark:focus:bg-slate-900" id="deviceMode" value="auto">
      <Icon name={'check'} class="checkmark invisible h-8 w-8" />
      Use device default
    </button>
    <button class="flex w-full gap-4 whitespace-nowrap border-b border-slate-300 p-4 text-left bg-slate-200 dark:bg-slate-950 hover:bg-slate-200 focus:bg-slate-200 focus-visible:outline-none dark:border-slate-700 dark:hover:bg-slate-900 dark:focus:bg-slate-900" id="lightMode" value="light">
      <Icon name={'check'} class="checkmark invisible h-8 w-8" />
      Light Theme
    </button>
    <button class="flex w-full gap-4 whitespace-nowrap border-b border-slate-300 p-4 text-left bg-slate-200 dark:bg-slate-950  hover:bg-slate-200 focus:bg-slate-200 focus-visible:outline-none dark:border-slate-700 dark:hover:bg-slate-900 dark:focus:bg-slate-900" id="darkMode" value="dark">
      <Icon name={'check'} class="checkmark invisible h-8 w-8" />
      Dark Theme
    </button>
    <span class="sr-only">Change theme</span>
  </div>
</div>

<style>
  .dropdown__window--active {
    display: block;
    visibility: visible;
  }
</style>

<script is:inline>
  document.getElementById('themeselector').addEventListener('click', (event) => {
    event.stopPropagation(); // Stop the propagation of the click event
    const dropdownWindow = document.querySelector('.dropdown__window');
    dropdownWindow.classList.toggle('hidden');
    dropdownWindow.classList.toggle('dropdown__window--active');
    if (!dropdownWindow.classList.contains('hidden')) {
      dropdownWindow.focus(); // Focus the dropdown window when it becomes active
    }
  });

  // Close dropdown window when clicking outside of it
  document.body.addEventListener('click', (event) => {
    const dropdownWindow = document.querySelector('.dropdown__window');
    const themeSelect = document.getElementById('themeselector');
    if (!dropdownWindow.contains(event.target) && event.target !== themeSelect) {
      dropdownWindow.classList.add('hidden');
      dropdownWindow.classList.remove('dropdown__window--active');
    }
  });
  
  // Close dropdown window when 'Esc' key is pressed
  document.body.addEventListener('keydown', (event) => {
    const dropdownWindow = document.querySelector('.dropdown__window');
    const themeSelect = document.getElementById('themeselector');
    if (!dropdownWindow.classList.contains('hidden') && event.key === 'Escape') {
      dropdownWindow.classList.add('hidden');
      dropdownWindow.classList.remove('dropdown__window--active');
      themeSelect.focus();
    }
  });

  // Allow navigating through dropdown options with arrow keys
  document.querySelector('.dropdown__window').addEventListener('keydown', (event) => {
    const dropdownWindow = document.querySelector('.dropdown__window');
    if (event.key === 'ArrowDown') {
      event.preventDefault();
      const nextOption = dropdownWindow.querySelector('button:focus + button');
      if (nextOption) {
        nextOption.focus();
      } else {
        dropdownWindow.querySelector('button').focus();
      }
    } else if (event.key === 'ArrowUp') {
      event.preventDefault();
      const prevOption = dropdownWindow.querySelector('button:focus').previousElementSibling;
      if (prevOption) {
        prevOption.focus();
      } else {
        dropdownWindow.querySelector('button:last-child').focus();
      }
    }
  });

  // Handle theme selection
  document.querySelectorAll('.dropdown__window button').forEach(button => {
    button.addEventListener('click', (event) => {
      theme.setTheme(event.target.value);
      updateSelectedTheme(event.target.value);
    });
  });

  document.addEventListener('theme-changed', (event) => {
    updateSelectedTheme(event.detail.theme);
  });

  function updateSelectedTheme(newTheme = theme.getTheme()) {
    const dropdownButtons = document.querySelectorAll('.dropdown__window button');
    dropdownButtons.forEach(button => {
      const checkmark = button.querySelector('.checkmark');
      if (button.value === newTheme) {
        checkmark.classList.replace('invisible', 'visible');
      } else {
        checkmark.classList.replace('visible', 'invisible');
      }
    });
  }

  // Initialize theme on page load
  updateSelectedTheme();
</script>
