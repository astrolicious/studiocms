---
import { twMerge } from 'tailwind-merge'
interface Props {
  extraClasses?: string
  orientation?: 'horizontal' | 'vertical'
}

const { extraClasses, orientation } = Astro.props

const horizontalClass = twMerge(
  'mx-4 border-b w-full border-gray-300 hidden md:block',
  extraClasses,
)
const verticalClass = twMerge(
  'my-4 h-full border-r border-gray-300 hidden md:block',
  extraClasses,
)
---

{
  orientation === 'horizontal' ? (
    <div aria-label='separator' class={horizontalClass} />
  ) : (
    <div aria-label='separator' class={verticalClass} />
  )
}

<!-- Revisit someday, my brain is mush -->
<!-- <separator
  is:client
  id='separator'
  aria-label='separator'
  orientation={orientation}
  class={orientation === 'horizontal' ? horizontalClass : verticalClass}
></separator>

<script>
  class Separator extends HTMLElement {
    static get observedAttributes() {
      return ['orientation']
    }

    constructor() {
      super()
      // Bind updateOrientation to the current context
      this.updateOrientation = this.updateOrientation.bind(this)
      // Call updateOrientation in case no orientation attribute is provided
      if (!this.hasAttribute('orientation')) {
        this.updateOrientation()
      }
    }

    connectedCallback() {
      // Add the resize event listener only if no orientation attribute is provided
      if (!this.hasAttribute('orientation')) {
        window.addEventListener('resize', this.updateOrientation)
      }
    }

    disconnectedCallback() {
      window.removeEventListener('resize', this.updateOrientation)
    }

    attributeChangedCallback(name, oldValue, newValue) {
      // When the orientation attribute changes, reflect that in the component
      if (name === 'orientation') {
        this.className =
          newValue === 'horizontal' ? horizontalClass : verticalClass
      }
    }

    updateOrientation() {
      // Only update orientation based on window size if no orientation attribute is provided
      if (!this.hasAttribute('orientation')) {
        const currentOrientation =
          window.innerWidth < 768 ? 'horizontal' : 'vertical'
        this.setAttribute('orientation', currentOrientation)
        this.className =
          currentOrientation === 'horizontal'
            ? '${horizontalClass}'
            : '${verticalClass}'
      }
    }
  }

  // Define the custom element if it hasn't been defined already
  if (!customElements.get('separator')) {
    customElements.define('separator', Separator)
  }
</script> -->
