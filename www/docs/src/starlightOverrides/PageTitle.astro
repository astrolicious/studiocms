---
import { getEntry } from 'astro:content';
import { Icon } from '@astrojs/starlight/components';
import Default from '@astrojs/starlight/components/PageTitle.astro';
import type { Props } from '@astrojs/starlight/props';
import Version from '../components/Version.astro';

const { data } = Astro.props.entry;

function parsePackageName(packageName: string): {
	scoped: boolean;
	scope: string | null;
	name: string;
} {
	// Check if the package is scoped
	if (packageName.startsWith('@')) {
		const parts = packageName.split('/');
		return {
			scoped: true,
			scope: parts[0], // the scope (e.g., '@scope')
			name: parts[1] || '', // the package name after the slash (e.g., 'packagename')
		};
	}
	return {
		scoped: false,
		scope: null, // no scope for unscoped packages
		name: packageName, // just the package name
	};
}

const { data: entryData } =
	data.type === 'integration'
		? await getEntry(data.catalogEntry)
		: {
				data: {
					name: '',
					released: false,
					githubURL: '',
				},
			};

const { scoped, scope, name } = parsePackageName(entryData.name);
---

{
	data.type === 'integration' ? (
		<div class="wrapper">
			<h1 id="_top">
				{
                    scoped 
                    ? <span class="scope">{scope}/</span><span>{name}</span> 
                    : <span>{name}</span>
                }
			</h1>
			<div class="integration-metadata">
				{ entryData.released ? <Version pkgName={entryData.name} /> : <code>N/A</code>}
				<a href={entryData.githubURL}>
					<Icon size="1rem" name="github" /> GitHub
				</a>
				<a href={'https://www.npmjs.com/package/' + entryData.name}>
					<svg width="16" height="16" viewBox="0 0 576 512" fill="currentColor" aria-hidden="true">
						<path d="M288 288h-32v-64h32v64zm288-128v192H288v32H160v-32H0V160h576zm-416 32H32v128h64v-96h32v96h32V192zm160 0H192v160h64v-32h64V192zm224 0H352v128h64v-96h32v96h32v-96h32v96h32V192z" />
					</svg>
					npm
				</a>
				<a href={entryData.githubURL + 'CHANGELOG.md'}>
					<Icon size="1rem" name="list-format" /> Changelog
				</a>
			</div>
		</div>
	) : (
		<Default {...Astro.props}>
			<slot />
		</Default>
	)
}

{ data.type === 'redirect' ? (
<div id="redirect-link" data-href={data.redirect} />
<script is:inline>
	const redirectLink = document.getElementById('redirect-link');
	location.href = redirectLink.dataset.href;
</script>
) : null }

<style>
	.wrapper {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
	}
	h1 {
		display: flex;
		flex-wrap: wrap;
		color: var(--sl-color-white);
		font-size: var(--sl-text-h1);
		font-weight: 700;
		line-height: var(--sl-line-height-headings);
	}
	.scope {
		color: var(--sl-color-text);
		font-weight: 500;
	}
	.integration-metadata {
		display: flex;
		flex-wrap: wrap;
		align-items: center;
		gap: 0.5rem 1rem;
		font-size: var(--sl-text-xs);
	}
	.integration-metadata a {
		display: flex;
		align-items: center;
		gap: 0.25rem;
		text-decoration: none;
		color: var(--sl-color-text-accent);
	}
	.integration-metadata a:hover {
		color: var(--sl-color-white);
	}
	.integration-metadata svg {
		width: 1.5rem;
	}
</style>
