---
import Code from './Code.astro';

const tursoCliCommands = ['db', 'auth'] as const;

const tursoAuthCommands = [
	'login',
	'logout',
	'signup',
	'token',
	'whoami',
	'api-tokens.mint',
	'api-tokens.list',
	'api-tokens.revoke',
] as const;

const tursoDBCommands = [
	'list',
	'create',
	'show',
	'destroy',
	'inspect',
	'shell',
	'locations',
	'tokens.create',
	'tokens.invalidate',
	'config.attach.allow',
	'config.attach.disallow',
	'config.attach.show',
] as const;

const allCommands = [...tursoAuthCommands, ...tursoDBCommands] as const;

type TursoCLICommands = (typeof tursoCliCommands)[number];

type AuthCommands = (typeof tursoAuthCommands)[number];

type DBCommands = (typeof tursoDBCommands)[number];

type AllCommands = (typeof allCommands)[number];

type Commands = {
	auth: Record<AuthCommands, string>;
	db: Record<DBCommands, string>;
};

const tursoCLICommands: Commands = {
	auth: {
		login: 'turso auth login',
		logout: 'turso auth logout',
		signup: 'turso auth signup',
		token: 'turso auth token',
		whoami: 'turso auth whoami',
		'api-tokens.mint': 'turso auth api-tokens mint',
		'api-tokens.list': 'turso auth api-tokens list',
		'api-tokens.revoke': 'turso auth api-tokens revoke',
	},
	db: {
		list: 'turso db list',
		create: 'turso db create',
		show: 'turso db show',
		destroy: 'turso db destroy',
		inspect: 'turso db inspect',
		shell: 'turso db shell',
		locations: 'turso db locations',
		'tokens.create': 'turso db tokens create',
		'tokens.invalidate': 'turso db tokens invalidate',
		'config.attach.allow': 'turso db config attach allow',
		'config.attach.disallow': 'turso db config attach disallow',
		'config.attach.show': 'turso db config attach show',
	},
};

const commandBuilder = (tursoCli: TursoCLICommands, type: AllCommands, arg: string) => {
	let command: string;

	switch (tursoCli) {
		case 'auth':
			command = tursoCLICommands.auth[type as AuthCommands];
			break;
		case 'db':
			command = tursoCLICommands.db[type as DBCommands];
			break;
		default:
			throw new Error(`Invalid Turso CLI command: ${tursoCli} ${type}`);
	}

	return `${command} ${arg}`;
};

interface Props {
	tursoCli: TursoCLICommands;
	type: AllCommands;
	arg: string;
}

const { tursoCli, type, arg } = Astro.props;

const code = commandBuilder(tursoCli, type, arg);
---
<Code {code} lang="sh" />